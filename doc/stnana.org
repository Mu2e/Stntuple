# use <TAB> to expand and collapse the menus
* ------------------------------------------------------------------------------
* STNANA: Stntuple interactive analysis framework                            

** _running interactively_:                                               

- initial checks:

1) your working area is that of the test release, 
2) [[file:../scripts/rootlogon.C]] and [[file:../scripts/.rootrc][.rootrc]] files have been copied from the [[file:../scripts][Stntuple/scripts]] area

- run an interactive STNTUPLE analysis job: 

1) open a ROOT session, load and run [[file:../scripts/stnana.C][Stntuple/scripts/stnana.C]] (make sure the input file name is correct) :

#+begin_src C
root [0] .L stnana.C 
root [1] stnana("file","","","nts._USER_.cele0s81b2.su2020.001000_00000000.stn","stn_val(11,28)/save=eminus_gun_stnmaker.hist",100)
#+end_src

stnana provides an interactive interface to the STNTUPLE event loop utility. Meaning of the call parameters:

- parameters 1-4 : define the dataset to run on, see the explanation below
- parameter 5    : defines the configuration of the analysis job
- parameter 6    : number of events to run on

The example above runs the analysis job configured by the call to ROOT function stn_val(11,28) on first 100 events 
of the file nts._USER_.cele0s81b2.su2020.001000_00000000.stn '11' and '28' are the call parameters of stn_val(...).
stn_val is defined in [[file:../ana/scripts/validation.C][Stntuple/ana/scripts/validation.C]]

The following example

#+begin_src C
      root[1] stnana("detsim","cnvs0202","","","track_ana()",10000)
#+end_src

runs the track_ana() function on first 10000 events of the dataset defined by the book="detsim" and dsname="cnvs0202".

WARNING: track_ana() function is not defined by default, don't try to call it.

** stnana call format                                                   

#+begin_src C
void stnana (TString Book, TString Dataset, TString Fileset = "", TString File = "",TString JobName="lumi()",int NEvents = 0) ; 
#+end_src

First 4 parameters in a call to *stnana* describe the input dataset: (read more on STNTUPLE datasets)

- *Book* : the book name, used in cataloging. One can have several books and have datasets 
           with the same name defined in different books

  special values:

  - book = "file" : run on a single file, in this case the 4th parameter (*File*) is the file name
  - book = "dir"  : use all files from directory *Fileset* with the name pattern given by *File*
  - book = "list" : filelist, *File* contains a list of stntuple file names, one filename per line; 
                    - lines starting with '#' ignored (comment lines)
  - book = "sam"  : access dataset stored in SAM, in this case the *Dataset* parameter is the SAM dataset definition
                    - to be implemented (need to figure how to deal with prestaging) 

- *Dataset* : the dataset name

- *Fileset* : fileset name. Fileset is a part of a dataset, several files located in the same directory. 
  Division of a dataset into filesets is purely logical. A fileset combines several files, such that it is 
  convenient to run a single analysis job on a fileset

- *File* : file name; for special book names, *File* has a special meaning - see above

- JobName : name of the configuration script, for example, "catalog()". JobName may include options 
  separated by '/', i.e. "catalog()/save=a.hist/grl=none,101,500"

  - allowed options:

  - /save : defines name of the histogram file. When the job finishes, the histograms will be saved 
    into a file with the predefined name. The file name can't include '/' characters, so the file has 
    to be stored in the current directory
  - /grl : name of the good run list (Mu2e doesn't have such yet)

- NEvents : number of events to be processed. If NEvents<=0 (default): process all events ​
** interactive capabilities of *stnana*                                 

When stnana.C is loaded, an object of StnAnaGlobals_t type is created. This object is accessible under 
the name ‘g’ and is defined in [[file:../scripts/global_vars.h][Stntuple/scripts/global_vars.h]]. The most used element of this structure, 
g.x , points to the Stntuple event loop utility, TStnAna

#+begin_src C
root [2] g.x
(class TStnAna*)0x1ff0afb0
#+end_src

The structure named *g* is initialized during the first call to stnana(...). After that, one can 
access *g* and its data members interactively. By accessing a TStnAna object interactively one can:

- process next event in a chain:

#+begin_src C
root [2] g.x->Continue(1) 
#+end_src

- process next 100 events:
#+begin_src C
root [2] g.x->Continue(100) 
#+end_src

- process an event with given 'Run' and 'Event' numbers:

#+begin_src C
root [2] g.x->ProcessEvent(Run,Event) 
#+end_src

- process a given entry in a chain:

#+begin_src C
root [2] g.x->ProcessEntry(101) 
#+end_src

- save histograms into a file:

#+begin_src  
root [2] g.x->SaveHist(Filename) 
#+end_src

- have full interactive access to the data members of modules running in the stnana event loop. 
  The example below illustrates the idea:

#+begin_src C
root [0] .L stnana.C  
root [1] stnana("file","nts.user.eminus_gun_stnmaker.xxx.000001.stn","","","val_stn(11,28)",1)
... snip ...
----- end job: ---- Validation 
>>> TStnAna::EndJob: processed          1 events, passed          1 events 
Real time 0:00:00, CP time 0.090 
root [2] stntuple::m_val->fTrackBlock->NTracks() 
(int) 1 
root [3] stntuple::m_val->fTrackBlock->Print() 
----------------------------------------------------------------------------------------------------------------------------------------------------- 
i  nh  na nw nosd nssd na0 ncl  alg_mask    id_word   q     p     momerr    T0     T0Err     D0      Z0    TanDip   TBack   chi2/dof   fcon  TrkQual 
----------------------------------------------------------------------------------------------------------------------------------------------------- 
0  41  41  0    5    9  11   0 0x00030001 0x00000000 -1  -97.884   0.160  527.325  0.525   7.708 -440.249  0.6986  536.507     0.91 6.24e-01   0.960
root [3] g.x->Continue(1);
root [4] stntuple::m_val->fTrackBlock->NTracks() 
(int) 0
#+end_src

** Printing STNTUPLE data blocks                                        

Each STNTUPLE data block has ::Print(..) function which could be called from the compiled code as well as interactively. 
One can process an event and print is data directly from the ROOT prompt.
For example, if a track block fTrackBlock is defined in your analysis module (m_ele), this is how to print 
it from the ROOT prompt:

#+begin_src
root[10] g.x->Continue(1);
root[11] m_ele->fTrackBlock->Print() 
#+end_src

* analysis packages                                                          

 - User analysis code is organized in packages, similar to Offline packages. 

 - [[file:../ana][Stntuple/ana]] gives an example of an analysis package

 - STNTUPLE analysis packages are specified in a .rootrc file , their list 
   can be extended with '+' lines as shown below
#+begin_src org
#------------------------------------------------------------------------------ 
# stnana packages, this example adds a single package - 'murat' - to the list of analysis packages
#------------------------------------------------------------------------------ 
 Stnana.Package                Stntuple 
 +Stnana.Package               murat  
 +Stnana.Package               muminus_eplus
 +Stnana.Package               piplusenu
#+end_src

 An analysis package *pkg* (replace *$pkg* with the name of your choice) should have 
 the following subdirectories:

 - *$pkg/ana*           : contains analysis code (analysis modules) 

 - *$pkg/ana/scripts*   : contains job configuration scripts 

 - *$pkg/ana/scripts* directory should contain a script named *load_stnana_scripts_$pkg.C*, 
   which at startup loads in ​​analysis job configuration scripts. See an example 
   in [[file:../ana/scripts/load_stnana_scripts_Stntuple.C][Stntuple/ana/scripts/load_stnana_scripts_Stntuple.C]], make your own loader script, 
   following the template

 - each loaded script defines one or multiple job configurations:
   - [[file:../ana/scripts/validation.C][Stntuple/ana/scripts/validation.C]] defines one job (stn_val)
   - file:../ana/scripts/trk.C         also defines one

 - file $pkg/ana/scripts/modules.hh declares user analysis modules - see example in 
   [[file:../ana/scripts/modules.hh][Stntuple/ana/scripts/modules.hh]] (the namespace there doesn't have to be replicated)

 - [[file:../ana/scripts][Stntuple/ana/scripts]] directory contains examples of the analysis job configuration scripts

 - [[file:../scripts/.rootrc][Stntuple/scripts/.rootrc]] file shows how to configure Unix.*.Root.MacroPath - path for loading ROOT macros

- each name used by *def_name* has to be unique 

* Internal structure of a user analysis package - an example                 

#+begin_src org  
  /mu2e/app/users/murat/mdc2018_prof/MyAna/ana:
  total used in directory 60 available 1171570368
  drwxr-xr-x 4 murat mu2e  2048 Jun 22 18:32 .
  drwxr-xr-x 4 murat mu2e  2048 Jun 22 18:32 ..
  -rw-r--r-- 1 murat mu2e  2071 Jun 22 18:32 SConscript
  -rw-r--r-- 1 murat mu2e 37986 Jun 22 18:32 TMyTrackAnaModule.cc
  drwxr-xr-x 3 murat mu2e  2048 Jun 22 18:32 ana
  drwxr-xr-x 2 murat mu2e  2048 Jun 22 18:32 scripts

  /mu2e/app/users/murat/mdc2018_prof/MyAna/ana/ana:
  total used in directory 24 available 1171570368
  drwxr-xr-x 3 murat mu2e 2048 Jun 22 18:32 .
  drwxr-xr-x 4 murat mu2e 2048 Jun 22 18:32 ..
  -rw-r--r-- 1 murat mu2e 9451 Jun 22 18:32 TMyTrackAnaModule.hh
  drwxr-xr-x 2 murat mu2e 2048 Jun 22 18:32 dict

  /mu2e/app/users/murat/mdc2018_prof/MyAna/ana/ana/dict:
  total used in directory 12 available 1171570368
  drwxr-xr-x 2 murat mu2e 2048 Jun 22 18:32 .
  drwxr-xr-x 3 murat mu2e 2048 Jun 22 18:32 ..
  -rw-r--r-- 1 murat mu2e  166 Jun 22 18:32 TMyTrackAnaModule_linkdef.h

  /mu2e/app/users/murat/mdc2018_prof/MyAna/ana/scripts:
  total used in directory 20 available 1171570368
  drwxr-xr-x 2 murat mu2e 2048 Jun 22 18:32 .
  drwxr-xr-x 4 murat mu2e 2048 Jun 22 18:32 ..
  -rw-r--r-- 1 murat mu2e  957 Jun 22 18:32 load_stnana_scripts_MyAna.C
  -rw-r--r-- 1 murat mu2e  148 Jun 22 18:32 modules.hh
  -rw-r--r-- 1 murat mu2e  674 Jun 22 18:32 trk.C
#+end_src

* [[file:analysis_packages.org][how to create a user analysis package]]                                      
* ------------------------------------------------------------------------------
* back to [[file:./Stntuple.org][Stntuple.org]]
* ------------------------------------------------------------------------------
