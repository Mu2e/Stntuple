* STNANA: Stntuple interactive analysis framework     

** running interactively:                

to run an interactive STNTUPLE analysis job, open a ROOT session, load and run [[file:../scripts/stnana.C][Stntuple/scripts/stnana.C]] :

#+begin_src C
root [0] .L stnana.C 
root [1] stnana("file","nts.user.eminus_gun_stnmaker.xxx.000001.stn","","","val_stn(11,28)/save=eminus_gun_stnmaker.hist",100)
#+end_src

stnana provides an interface to STNTUPLE event loop utility. The call parameters specify

- dataset to run on: first 4 parameters, see explanation below
- configuration of the analysis job: which analysis code should be executed within the event loop
- number of events to run on

The example above runs the analysis job configured by ROOT function val_stn(11,28) on first 100 events 
of the file nts.user.eminus_gun_stnmaker.xxx.000001.stn. '11' and '28' are the call parameters passed to val_stn().

The following example

#+begin_src C
      root[1] stnana("detsim","cnvs0202","","","track_ana()",10000)
#+end_src

runs the track_ana() function on first 10000 events of the dataset defined by the book="detsim" and dsname="cnvs0202".

WARNING: track_ana() function is not defined by default, don't try to call it.

** stnana call format                    

#+begin_src C
void stnana (TString Book, TString Dataset, TString Fileset = "", TString File = "",TString JobName="lumi()",int NEvents = 0) ; 
#+end_src

First 4 parameters in a call to *stnana* describe the input dataset: (read more on STNTUPLE datasets)

- *Book* : the book name, used in cataloging. One can have several books and have datasets 
           with the same name defined in different books

  special values:

  - book = "file" : run on a single file, in this case the 4th parameter (*File*) is the file name
  - book = "dir"  : use all files from directory *Fileset* with the name pattern given by *File*
  - book = "list" : filelist, *File* contains a list of stntuple file names, one filename per line; 
                    - lines starting with '#' ignored (comment lines)

- *Dataset* : the dataset name

- *Fileset* : fileset name. Fileset is a part of a dataset, several files located in the same directory. 
  Division of a dataset into filesets is purely logical. A fileset combines several files, such that it is 
  convenient to run a single analysis job on a fileset

- *File* : file name; for special book names, *File* has a special meaning - see above

- JobName : name of the configuration script, for example, "catalog()". JobName may include options 
  separated by '/', i.e. "catalog()/save=a.hist/grl=none,101,500"

  - allowed options:

  - /save : defines name of the histogram file. When the job finishes, the histograms will be saved 
    into a file with the predefined name. The file name can't include '/' characters, so the file has 
    to be stored in the current directory
  - /grl : name of the good run list (Mu2e doesn't have such yet)

- NEvents : number of events to be processed. If NEvents<=0 (default): process all events ​
** interactive capabilities of *stnana*  

When stnana.C is loaded, an object of StnAnaGlobals_t type is created. This object is accessible under 
the name ‘g’ and is defined in [[file:../scripts/global_vars.h][Stntuple/scripts/global_vars.h]]. The most used element of this structure, 
g.x , points to the Stntuple event loop utility, TStnAna

#+begin_src C
root [2] g.x
(class TStnAna*)0x1ff0afb0
#+end_src

The structure named *g* is initialized during the first call to stnana(...). After that, one can 
access *g* and its data members interactively. By accessing a TStnAna object interactively one can:

- process next event in a chain:

#+begin_src C
root [2] g.x->Continue(1) 
#+end_src

- process next 100 events:
#+begin_src C
root [2] g.x->Continue(100) 
#+end_src

- process an event with given 'Run' and 'Event' numbers:

#+begin_src C
root [2] g.x->ProcessEvent(Run,Event) 
#+end_src

- process a given entry in a chain:

#+begin_src C
root [2] g.x->ProcessEntry(101) 
#+end_src

- save histograms into a file:

#+begin_src  
root [2] g.x->SaveHist(Filename) 
#+end_src

- have full interactive access to the data members of modules running in the stnana event loop. 
  The example below illustrates the idea:

#+begin_src C
root [0] .L stnana.C  
root [1] stnana("file","nts.user.eminus_gun_stnmaker.xxx.000001.stn","","","val_stn(11,28)",1)
... snip ...
----- end job: ---- Validation 
>>> TStnAna::EndJob: processed          1 events, passed          1 events 
Real time 0:00:00, CP time 0.090 
root [2] stntuple::m_val->fTrackBlock->NTracks() 
(int) 1 
root [3] stntuple::m_val->fTrackBlock->Print() 
----------------------------------------------------------------------------------------------------------------------------------------------------- 
i  nh  na nw nosd nssd na0 ncl  alg_mask    id_word   q     p     momerr    T0     T0Err     D0      Z0    TanDip   TBack   chi2/dof   fcon  TrkQual 
----------------------------------------------------------------------------------------------------------------------------------------------------- 
0  41  41  0    5    9  11   0 0x00030001 0x00000000 -1  -97.884   0.160  527.325  0.525   7.708 -440.249  0.6986  536.507     0.91 6.24e-01   0.960
root [3] g.x->Continue(1);
root [4] stntuple::m_val->fTrackBlock->NTracks() 
(int) 0
#+end_src

** Printing STNTUPLE data blocks         

Each STNTUPLE data block has ::Print(..) function which could be called from the compiled code as well as interactively. 
One can process an event and print is data directly from the ROOT prompt.
Here is an example of how to print a track block:

#+begin_src
root[10] g.x->Continue(1);
root[11] m_ele->fTrackBlock->Print() 
#+end_src
