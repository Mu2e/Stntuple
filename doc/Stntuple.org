#+startup:fold
# ------------------------------------------------------------------------------
# how to use this documentation:
# ------------------------------
# the best way is to pull the Stntuple code and use emacs to browse the .org files 
# in that case all links are handled correctly
#
# browsing documentation on GitHub: 
# ---------------------------------
# GitHub supports the org mode, but doesn't handle correctly the ord-mode links 
# with searches in them
#
# hit <TAB> to expand and collapse the menues
* ------------------------------------------------------------------------------
* what is STNTUPLE                                                           

  STNTUPLE is two things:

  - an ntuple data format
  - a light-weight interactive ntuple analysis framework, used for many years by the CDF experiment at Fermilab 
    and ported to Mu2e.
    The framework supprots multiple job configurations, it is interfaced to the data handling system and allows to run 
    analysis jobs of any complexity, interactively and on the GRID.

  STNTUPLE development is based on the following assumptions:

  - in any experiment, over time, ntuples become large. De-facto, they become mini-DST's.
  - Ntuple datasets also become large, one needs a way to share them and store them in the data handling system
  - "Click-on-TNtuple"-based mode doesn't work for publication-level analysis. 
     To be able to efficiently re-submit a job and to deal with multiple jobs 
     one needs a framework. 
     For reproducibility, analysis jobs should be configured and driven by scripts
  - analysis code quickly becomes rather sophisticated. 
    It can't be used in interpreted mode - has to be compiled
  - HEP uses C++ for compiled code. Using one language is less expensive than two.
    Thus all scripting, and the needed level of scripting is rather simple, is done using ROOT C++ 
    interpreting capabilities
  - an HEP analysis can be competed and published using ~5% of C++ functionality, without any disadvantages.
    Therefore STNTUPLE C++ is, by design, a "simple" , C-style, C++, which doesn't require any knowledge 
    of advanced features of the language.

  - lets keep it simple :) 
* news, support: Mu2e #stntuple slack channel                                
    https://app.slack.com/client/T314VMYV8/C013P69F9GR                              
* [[file:./how-to-build.org][how to build Stntuple libraries]]
* [[file:how-to-make-first-stntuple.org][how to make first Stntuple]] 
* [[file:stnana.org][stnana]] - STNTUPLE analysis framework                                       
* [[file:stntuple-datasets.org][STNTUPLE datasets]]
* STNTUPLE [[file:how-tos.org][how-to's]]    
* [[file:event_display.org][STNTUPLE event display]]  
* STNTUPLE Offline modules and their parameters                              
** InitStntuple
** StntupleMaker                                                             
  - defines absolute majority of the configuration parameters
  - *triggerResultsTag*  : defines the tag of the TriggerResults object      
    used to retrieve the trigger bits
    - each art job generates a TriggerResults object, only one makes sense.
    - thus need to choose it by specifying the process name explicitly
    - example:  "TriggerResults::Mix"  # no product name
  - *primaryParticleTag* :                                                   
    - this is the tag of the PrimaryParticle object
    - still don't know what the PrimaryParticle is, ask Dave
  - *helixCollTag* :                                                         
    - list of ntupled helix collction tags (art sequence, in square brackets)
** FillStntuple
* copying and filtering: file:copying_and_filtering.org                      
** EventFilter                                                               
   - given an event list, filters events from the list 
   - event is defnined by three integers - (run,subrun,number) 
   - event list does not need to be ordered
   - example of a talk-to:
#+begin_src 
EventFilter.eventList : [
 1000,  0,  89,
 1000,  0, 105,
 1100,  1,  78
]
#+end_src
** StntupleMaker                                                             
  - defines configuration of the Stntuple making job
** InitStntuple                                                              

   Stntuple making job requires three modules: 
   InitStntuple, StntupleMaker, and FillStntuple. 

   users interact only with StntupleMaker
** FillStntuple
** MuHitDisplay - Stntuple event display module
* uploading Stntuple's to tape                                               
- use grim package                                 
- see [[https://github.com/pavel1murat/grim/blob/main/scripts/upload_stn_dataset]]

  last time we did that for SU2020, so the script can contain some SU2020 remnants
* news and updates: [[https://app.slack.com/client/T314VMYV8/C013P69F9GR][Mu2e #stntuple channel on Slack]] 
* ------------------------------------------------------------------------------
* more technical details
* ------------------------------------------------------------------------------
* [[file:sample-fcl-files.org][Example FCL files]]                                                            
* [[file:package-organization.org][package organization]]                                                          
* [[file:data_blocks.org][Stntuple data blocks]]
* [[file:track_id.org][TStnTrackID]]
* ------------------------------------------------------------------------------
