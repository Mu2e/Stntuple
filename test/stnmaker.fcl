# -*- mode: tcl -*-
# 2014-12-19 P.Murat: to be used with submit_mu2e_job, 
#                     otherwise rename 'outfile.fileName' and TFileService.fileName
#
# read digitized hits from the input file, no digitization, no random numbers
#
# $Id: stnmaker.fcl,v 1.1 2014/06/13 06:13:03 murat Exp $

#include "minimalMessageService.fcl"
#include "standardProducers.fcl"
#include "standardServices.fcl"

#include "CaloCluster/test/producers.fcl"
#include "TrackCaloMatching/test/producers.fcl"
#include "ParticleID/test/producers.fcl"
#include "Stntuple/fcl/profile.fcl"

process_name : stnmaker

source : {
  module_type : RootInput
  fileNames   : [ "undefined" ]
  maxEvents   : -1
}

outputs: {
    outfile : {
	module_type    : RootOutput
	fileName       : "{DATASET}.{JOB}.strip.root"
	SelectEvents  : { SelectEvents: [ p1 ] }
#------------------------------------------------------------------------------
# as hits are regenerated anyway, drop hits on input, if they exist
#------------------------------------------------------------------------------
	outputCommands : ['keep *_*_*_*'
#			  , 'drop mu2eStrawDigis_*_*_*'
#			  , 'drop mu2eStrawHits_*_*_*'
#			  , 'drop *_CaloReadoutHitsMaker_*_*'
#			  , 'drop *_CaloCrystalHitsMaker_*_*'
#			  , 'drop mu2eCaloClusters_*_*_*'
			  , 'drop *_TrkExtrapol_*_*_*'
			  , 'drop *_CaloMatching_*_*_*'
			  , 'drop *_ParticleID_*_*_*'
			  #                   , 'drop mu2ePointTrajectoryMapVector_*_*_*'
			  #                   , 'drop mu2eSimParticles_*_*_*'
			  # Uncomment the above line to reduce file size.
			 ]  
    }
}

services : {
  message               : @local::default_message
    TFileService          : { fileName : "{DATASET}.{JOB}.hist"}
#     RandomNumberGenerator : { }

  user : {
    GeometryService        : { inputFile      : "Mu2eG4/test/geom_01.txt"        }
    ConditionsService      : { conditionsfile : "Mu2eG4/test/conditions_01.txt"      }
    GlobalConstantsService : { inputFile      : "Mu2eG4/test/globalConstants_01.txt" }
###    G4Helper               : { }
#      SeedService            : @local::automaticSeeds
  }
}

physics : {

    producers : {
#    protonTimeMap        : { module_type : GenerateProtonTimes }
#    muonTimeMap          : { module_type : GenerateMuonLife }
#    makeSD               : @local::makeSD
#    makeSH               : @local::makeSHfromSD
#    CaloReadoutHitsMaker : @local::CaloReadoutHitsMaker
#    CaloCrystalHitsMaker : @local::CaloCrystalHitsMaker

#	MakeStereoHits       : @local::MakeStereoHits
#	FlagStrawHits        : @local::FlagStrawHits
#	FlagBkgHits          : @local::FlagBkgHits
	TrkPatRec            : @local::TrkPatRecDownstreameMinus
#	MakeCaloCluster      : @local::MakeCaloCluster
#------------------------------------------------------------------------------
# analysis module needed by STNTUPLE maker
#------------------------------------------------------------------------------	
	TrkExtrapol          : @local::TrkExtrapol
	CaloMatching         : @local::TrackCaloMatching
	ParticleID           : @local::ParticleID
    }
    filters: {
#------------------------------------------------------------------------------
# Stntuple maker sequence
#------------------------------------------------------------------------------
	InitStntuple         : @local::InitStntuple
	StntupleMaker        : @local::StntupleMaker
	FillStntuple         : @local::FillStntuple
    }
#------------------------------------------------------------------------------
# analysis modules
#------------------------------------------------------------------------------
    analyzers : {
    }
#------------------------------------------------------------------------------
# passes
#------------------------------------------------------------------------------
    p1 : [ 
#	  protonTimeMap, muonTimeMap, 
#	  makeSD, makeSH,
#	  CaloReadoutHitsMaker, CaloCrystalHitsMaker, 
#	  MakeStereoHits, FlagStrawHits, FlagBkgHits, 
#	  MakeCaloCluster, 
          TrkPatRec, 
	  TrkExtrapol, CaloMatching, 
	  ParticleID,
	  InitStntuple, StntupleMaker, FillStntuple
	 ]
    
    e1 : [ outfile ]
    #  e1 : [  ]
    
    trigger_paths  : [p1]
    #  trigger_paths  : []
    #  end_paths      : [e1]
    end_paths      : []
}


# services.user.SeedService.baseSeed         :   0
# services.user.SeedService.maxUniqueEngines :  20

# print per event timing for ::event entry points
# services.Timing: { }
# print 
services.scheduler.wantSummary: true

# Apply the time offsets in tracker digitization
# physics.producers.makeSD.TimeOffsets               :  { inputs : [ "protonTimeMap", "muonTimeMap" ] }
# physics.producers.CaloReadoutHitsMaker.TimeOffsets :  { inputs : [ "protonTimeMap", "muonTimeMap" ] }
# physics.filters.StntupleMaker.strawHitMaker : makeSH