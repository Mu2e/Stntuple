# -*- mode:tcl -*-
// Andrei Gaponenko, 2014

#include "minimalMessageService.fcl"
#include "standardProducers.fcl"
#include "standardServices.fcl"

# Give this job a name.

source : { module_type : EmptyEvent }

services : {

    message               : @local::default_message
    TFileService          : { fileName : @nil }
    RandomNumberGenerator : { }

    user : {
        GeometryService        : { inputFile      : "JobConfig/TDR/geom_MothersToHits.txt" }
        ConditionsService      : { conditionsfile : "Mu2eG4/test/conditions_01.txt"      }
        GlobalConstantsService : { inputFile      : "Mu2eG4/test/globalConstants_01.txt" }
        G4Helper               : { }
        SeedService            : @local::automaticSeeds
    }
}

physics : {

    //================================================================
    producers: {

        generate: {
            module_type: StoppedParticleReactionGun
	    verbosityLevel : 1
            physics: @nil
            muonStops : @local::muonStops
        }

        genCounter: {
            module_type: GenEventCounter
        }

        g4run : {
            module_type          : G4
            simParticleNumberOffset : 400000
            generatorModuleLabel : "generate"
            doWriteLegacyPhysVolumeInfo : false
            SDConfig : {
                // do not want e.g. the "stoppingtarget" SD, thus do not use enableAllSDs
                // Instead explicitly list all the detectors we want
                enableSD : [ tracker, calorimeter, calorimeterRO, CRV, virtualdetector ]
                sensitiveVolumes: []
            }

            SimParticlePrinter : {
                enabled : false
                primariesOnly : false
                prefix : "SimParticle: "
            }
        }

        compressPVDetector: {
            module_type: CompressPhysicalVolumes
            volumesInput : "g4run"
            hitInputs : []
            particleInputs : [ "detectorFilter:s0" ]
        }

        compressPVCRV: {
            module_type: CompressPhysicalVolumes
            volumesInput : "g4run"
            hitInputs : []
            particleInputs : [ "crvFilter:s0" ]
        }

        compressPVFull : {
            module_type: CompressPhysicalVolumes
            volumesInput : "g4run"
            hitInputs : []
            particleInputs : [ "g4run" ]
        }
    } // producers

    //================================================================
    filters: {
        detectorFilter: {
            module_type: FilterG4Out
            mainHitInputs: [ "g4run:tracker", "g4run:calorimeter", "g4run:calorimeterRO"]
            extraHitInputs: [ "g4run:virtualdetector" ]
            numSimParticleCollections: 1
            vetoDaughters: []
        }
        crvFilter: {
            module_type: FilterG4Out
            mainHitInputs: [ "g4run:CRV" ]
            extraHitInputs: [ "g4run:virtualdetector" ]
            numSimParticleCollections: 1
            vetoDaughters: []
        }
        g4status: {
            module_type: FilterStatusG4
            input: "g4run"
        }
    }

    //================================================================
    analyzers: {
        genCountLogger: {
            module_type: GenEventCountReader
        }
        gpa: {
            module_type: GenParticlesAnalyzer
            inputs: generate
        }
    }

    //================================================================
    detPath : [generate, genCounter, g4run, "-detectorFilter" ]
 
   crvPath : [generate, genCounter, g4run, crvFilter, compressPVCRV]
    g4StatusFilter :  [generate, genCounter, g4run, "!g4status", compressPVFull ]

#    trigger_paths  : [detPath, crvPath, g4StatusFilter]
    trigger_paths  : [detPath]

#    out : [detectorOutput, crvOutput, truncatedEvtsOutput]
    out : [detectorOutput]
    an : [genCountLogger, gpa]
#    end_paths      : [out, an]
    end_paths      : [out]
}

outputs: {
    detectorOutput : {
        module_type : RootOutput
        SelectEvents: { SelectEvents: [detPath] }
        outputCommands:   [ "drop *_*_*_*",
                            "keep *_generate_*_*",
                            "keep mu2e::GenEventCount_*_*_*",
                            "keep mu2e::StatusG4_*_*_*",
                            "keep *_detectorFilter_*_*",
                            "keep *_compressPVDetector_*_*"
                          ]
        fileName    : @nil
    }

    fullOutput : {
        module_type : RootOutput
        fileName    : @nil
    }
}

// Initialze seeding of random engines: do not put these lines in base .fcl files for grid jobs.
services.user.SeedService.baseSeed         :  0
services.user.SeedService.maxUniqueEngines :  20
