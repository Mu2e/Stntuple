#!/usr/bin/env ruby
#------------------------------------------------------------------------------
#  usage: 
#  ------
#  cdfopr/scripts/catalog_stntuples -b book -d dataset -m mode -v verbose   \
#                                   -u user -h host -D directory -p pattern 
# 
# starts from already created file-level catalog file and assigns fileset 
# numbers. Then creates fileset-level catalog
# examples:
# ---------
# cdfopr/scripts/catalog_stntuples -h diskpool -d jbmmgh -b ewk/wtaunu -p jbmm
#
# if pattern is not defined, it is assumed to coinside with the dataset name
#------------------------------------------------------------------------------
require 'find'
require 'fileutils'
require 'getoptlong'

def usage
  printf "usage: catalog_stntuples [-v] [-u user]"
  printf " -d dataset -H host -D directory [-b book]"
  printf " -p pattern [-m mode]\n"
  exit(0)
end

usage if ARGV.length < 1

opts = GetoptLong.new(
  [ "--book"          , "-b",        GetoptLong::REQUIRED_ARGUMENT ],
  [ "--dataset"       , "-d",        GetoptLong::REQUIRED_ARGUMENT ],
  [ "--Directory"     , "-D",        GetoptLong::REQUIRED_ARGUMENT ],
  [ "--help"          , "-?",        GetoptLong::NO_ARGUMENT       ],
  [ "--install"       , "-i",        GetoptLong::REQUIRED_ARGUMENT ],
  [ "--host"          , "-h",        GetoptLong::REQUIRED_ARGUMENT ],
  [ "--pattern"       , "-p",        GetoptLong::REQUIRED_ARGUMENT ],
  [ "--mode"          , "-m",        GetoptLong::REQUIRED_ARGUMENT ],
  [ "--user"          , "-u",        GetoptLong::REQUIRED_ARGUMENT ],
  [ "--verbose"       , "-v",        GetoptLong::NO_ARGUMENT       ]
)

#----------------------------- defaults
$user           = ENV["USER"]
$host           = `hostname -f`.strip
$directory      = ""
$pattern        = ""
$book           = "stntuple/dev_242"
$mode           = "1"   # "11" for 
$dataset        = ""
$verbose        = 0
$install_host   = ''
$pid            = Process.pid.to_s();
$protocol       = 'rsh'
$diskpool       = nil;

# puts " emoe"

#----------------------------- process the parsed options
opts.each do |opt, arg|
  if    (opt == "--dataset"       ) then
     $dataset        = arg 
     if ($pattern == "") ; then $pattern = arg ; end
  elsif (opt == "--Directory"     ) ; $directory      = arg 
  elsif (opt == "--help"          ) ; usage()    
  elsif (opt == "--host"          ) ; $host           = arg 
  elsif (opt == "--install"       ) ; $install_host   = arg 
  elsif (opt == "--book"          ) ; $book           = arg 
  elsif (opt == "--mode"          ) ; $mode           = arg 
  elsif (opt == "--pattern"       ) ; $pattern        = arg 
  elsif (opt == "--user"          ) ; $user           = arg 
  elsif (opt == "--verbose"       ) ; $verbose        = 1   
  end

 if ($verbose != 0) ; puts "Option: #{opt}, arg #{arg.inspect}" ; end
end
#------------------------------------------------------------------------------
if ($host == "ncdf131") then
  $user = "murat"
  $host = "ncdf131.fnal.gov"
  if ($directory == "") then
    $directory = "/cdf/data37a/s1/datasets/cdfpewk/#{$dataset}" ; 
  end
elsif ($host == "fcdfdata122") then
  $host = "fcdfdata122.fnal.gov"
  if ($directory == "")  
    $directory = "/export/data2/ewk/datasets/cdfpewk/#{$dataset}" ; 
  end
elsif ($host == "diskpool") then
  $diskpool  = 'cdf://analysis_pool'
  $protocol  = 'dcap'
  $user      = 'cdfdata'
  $host      = "fcdfrdc3.fnal.gov"
  if ($directory == "")  
    $directory = "/pnfs/diskpool/#{$book}/#{$dataset}" ; 
  end
else
  $directory=$directory+'/'+$dataset ;
end

# exit(0);
#------------------------------------------------------------------------------
class Fileset
  attr_reader :nevents, :lorun, :loevt, :hirun, :hievt 
  attr_writer :nevents, :lorun, :loevt, :hirun, :hievt 

  def my_print()
    print "new fileset: #{@nevents} #{@lorun}  #{@loevt} #{@hirun} #{@hievt}\n";
  end

  def initialize(nevents, lorun, loevt, hirun, hievt)
    @nevents  = nevents
    @lorun    = lorun
    @loevt    = loevt
    @hievt    = hievt
    @hirun    = hirun;
	
    my_print();
  end
end
#-----------------------------------------------------------------------
# cdfopr/scripts/catalog_stntuples produces $dataset.catalog file
# start from forming a request file
#-----------------------------------------------------------------------
$request_file = 'aaa.request.'+$pid;
f = File.new($request_file,"w");

if ($verbose != 0) then 
  puts "$host = #{$host}, hostname=#{`hostname -f`.strip} directory=#{$directory} pattern=#{$pattern}" ; 
end

if    ($host == `hostname -f`.strip) then

  f.puts("# DATA_SERVER   .            ");
  f.puts("# INPUT_DIR     #{$directory}");
  f.puts("# BOOK          #{$book}     ");
  f.puts("# DATASET       #{$dataset}  ");
  f.puts("# OUTPUT_DIR    #{$directory}");
  f.puts(`dir -l #{$directory} | grep #{$pattern} | awk '{print $9}'`);

elsif ($host == 'npenn17.fnal.gov') then

  f.puts("# DATA_SERVER     ");
  f.puts("# INPUT_DIR     #{$directory}");
  f.puts("# BOOK          #{$book}     ");
  f.puts("# DATASET       #{$dataset}  ");
  f.puts("# OUTPUT_DIR    #{$directory}");
  f.puts(`rsh -l kristian #{$host} dir -l #{$directory} | grep #{$pattern} | awk '{print $9}'`);

elsif ($host.index('fcdfdata')) then

  f.puts("# DATA_SERVER root://#{$host}  ");
  f.puts("# INPUT_DIR     #{$directory}");
  f.puts("# BOOK          #{$book}     ");
  f.puts("# DATASET       #{$dataset}  ");
  f.puts("# OUTPUT_DIR    #{$user}@#{$host}#{$directory}");
  f.puts(`cdfopr/scripts/caf -h #{$host}:#{$directory} hostdir | grep #{$pattern} | awk '{print $9}'`);

elsif ($host.index('fcdfrdc3')) then
  puts "here ...#{$directory} "
  f.puts("# DATA_SERVER dcap://#{$host}  ");
  f.puts("# INPUT_DIR     #{$directory}");
  f.puts("# BOOK          #{$book}     ");
  f.puts("# DATASET       #{$dataset}  ");
  f.puts("# OUTPUT_DIR    #{$user}@#{$host}#{$directory}");
  f.puts(`ssh -l cdfdata fcdflnx3.fnal.gov dir -l #{$directory} | grep #{$pattern} | awk '{print $9}'`);

else

  f.puts("# DATA_SERVER root://#{$host}  ");
  f.puts("# INPUT_DIR     #{$directory}");
  f.puts("# BOOK          #{$book}     ");
  f.puts("# DATASET       #{$dataset}  ");
  f.puts("# OUTPUT_DIR    #{$user}@#{$host}#{$directory}");

#  puts "we are here"
#  puts "ssh -l #{$user} #{$host} ls -l #{$directory} | grep #{$pattern} | awk '{print $9}'"

  f.puts(`ssh -l #{$user} #{$host} ls -l #{$directory} | grep #{$pattern} | awk '{print $9}'`);

end

f.close();

$tmp_script = 'script.'+$pid+'.C'
$logfile   = 'catalog_stntuples.'+Process.pid.to_s()+'.log'

f1 = File.new($tmp_script,'w');
f1.puts('{');
f1.puts('  gInterpreter->LoadMacro("Stntuple/ana/scripts/dh.C");');
f1.puts("  dh::catalog_list_of_files(\"#{$request_file}\",#{$mode});");
f1.puts('}');
f1.close();
#------------------------------------------------------------------------------
#  the rest is running root and parsing the logfile
#------------------------------------------------------------------------------
cmd ="root.exe -b -q #{$tmp_script} | grep #{$pattern} >> #{$logfile}  2>&1";

if ($verbose != 0) ; puts "::: #{cmd}" ; end
rc = `#{cmd}`
if ($verbose != 0) ; puts "rc = #{rc}" ; end

$input_file=$logfile
file = File.open($input_file);

file_catalog = File.new($dataset.gsub('/','_')+'.files.'+$pid,"w");

$list_of_filesets = Array.new;

i  = 1
fs = 1

nevents = 0;
lo_run  = 1000000
lo_evt  = 1000000
hi_evt  = -1;
hi_run  = -1;

#------------------------------------------------------------------------------
# read list of files and sort it according to 'lorun'. 
# 'result' tells the sign of comparison
#------------------------------------------------------------------------------ 
a  = file.readlines().sort{|x,y| 
  r1 = x.split[6].to_i; 
  r2 = y.split[6].to_i; 
  dr = r1-r2;
  if (dr == 0) then
    e1 = x.split[7].to_i; 
    e2 = y.split[7].to_i; 
    dr = e1-e2
  end
  result = dr;
}

a.each { |line|
  xx = line[0,1]
  if ( xx != "#" ) 
    a = line.split();
    a[0]  = $dataset;
    nev   = a[5].to_i;
    lorun = a[6].to_i;
    loevt = a[7].to_i;
    hirun = a[8].to_i;
    hievt = a[9].to_i;

    file_catalog.printf( "%06i %s %10.3f  %s %s %6i %7i %9i %7i %9i\n",
                         fs, a[1], a[2].to_f,
                         a[3], a[4], nev, lorun, loevt, hirun, hievt);
    i = i+1
#-----------------------------------------------------------------------
# update fileset-level information
#-----------------------------------------------------------------------
   nevents = nevents + nev;

   if (lorun < lo_run) then
     lo_run = lorun;
     lo_evt = loevt;
   elsif (lorun == lo_run) 
     if (loevt < lo_evt)
       lo_evt = loevt;
     end
   end

   if (hirun > hi_run) then
     hi_run = hirun;
     hi_evt = hievt;
   elsif (hirun == hi_run)
     if (hievt > hi_evt) 
       hi_evt = hievt;
     end
   end
#-----------------------------------------------------------------------
   if (nevents > 200000) then
#-----------------------------------------------------------------------
#  new fileset
#-----------------------------------------------------------------------
      fileset = Fileset.new(nevents,lo_run,lo_evt,hi_run,hi_evt);
      $list_of_filesets.push(fileset);
      
      nevents = 0;
      lo_run  = 1000000
      lo_evt  = 1000000
      hi_run  = -1
      hi_evt  = -1;

      fs = fs + 1
      i = 0
    end
  else
    file_catalog.puts line
  end
}
#-----------------------------------------------------------------------
#  last not complete fileset , if any
#-----------------------------------------------------------------------
if (hi_run != -1) then
   fileset = Fileset.new(nevents,lo_run,lo_evt,hi_run,hi_evt);
   $list_of_filesets.push(fileset);
end

file.close
file_catalog.close
#-----------------------------------------------------------------------
# step 2: final printout of the fileset-level catalog
#-----------------------------------------------------------------------
fileset_catalog = File.new('AAA_CATALOG.html.'+$pid,"w");
comment_line = '#----------------------------------------------';
comment_line = comment_line+'-------------------------------------------';
comment_line = comment_line+'-------------------------------------------';

fileset_catalog.puts'<pre>'
fileset_catalog.puts comment_line
fileset_catalog.puts "# <b>dataset: #{$dataset}</b> "
fileset_catalog.printf("# fileset     server             directory   ");
fileset_catalog.printf("       nevents\n");
fileset_catalog.puts comment_line

if ( $diskpool == nil ) then
  host = $host
  dir  = $directory
else
  host = $diskpool
  dir  = "/#{$book}/#{$dataset}"
end

i = 0;
$list_of_filesets.each {|fset| 
  i = i+1;
  fileset_catalog.printf("%06i  %-20s  %-45s %6i %7i %9i %7i %9i\n",i,host,dir,
                        fset.nevents,fset.lorun,fset.loevt,fset.hirun,fset.hievt)
}
fileset_catalog.puts comment_line
fileset_catalog.puts'</pre>'
fileset_catalog.close();
#-----------------------------------------------------------------------
# installation, if requested
#-----------------------------------------------------------------------
if ($install != '') then
end
#-----------------------------------------------------------------------
# final step: cleanup
#-----------------------------------------------------------------------
rc = `rm #{$logfile} #{$tmp_script} #{$request_file}`

exit(rc.to_i)
