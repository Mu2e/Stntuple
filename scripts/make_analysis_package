#!/bin/bash
#------------------------------------------------------------------------------
# create a prototype of a user analysis package by cloning and renaming templates 
# from Stntuple/ana 
# call format:  
#                 make_analysis_package [pkg]
#
#  pkg : name of the user analysis package to be created, default:"MyAna"
#------------------------------------------------------------------------------
pkg=MyAna

if [ ".$1" != "." ] ; then pkg=$1 ; fi

mkdir -p $pkg/ana/ana/dict
mkdir -p $pkg/ana/scripts
mkdir -p $pkg/scripts

#------------------------------------------------------------------------------
# populate
#------------------------------------------------------------------------------
cp Stntuple/ana/SConscript $pkg/ana

cat Stntuple/scripts/build_config  | grep -v site_scons | sed "s/Stntuple/$pkg/g" >| $pkg/scripts/build_config

#------------------------------------------------------------------------------
# copy modules
#------------------------------------------------------------------------------
declare -a modules
declare -a scripts
declare -a m_names

modules=(GenAna   TrackAna TriggerAna CrvAna HelixAna TrackSeedAna)
scripts=(genp.C   trk.C    trigger.C  crv.C  helix.C  trs.C       )
m_names=(m_gen    m_trk    m_trig     m_crv  m_hel    m_trs       )

for m in ${modules[@]}; do
    m1=Stn$m ; # echo m1 = $m1
    m2=My$m  ; # echo m2 = $m2

    module1=T${m1}Module
    module2=T${m2}Module

    # echo making $module2 from $module1
    
    cat Stntuple/ana/$module1.cc |\
	sed "s#Stntuple/ana/T${m1}#$pkg/ana/T${m2}#g" | sed "s/$m1/$m2/g" >| $pkg/ana/$module2.cc
    cat Stntuple/ana/ana/$module1.hh                  | sed "s/$m1/$m2/g" >| $pkg/ana/ana/$module2.hh
    cat Stntuple/ana/ana/dict/${module1}_linkdef.h    | sed "s/$m1/$m2/g" >| $pkg/ana/ana/dict/${module2}_linkdef.h
done

source $pkg/scripts/build_config
#------------------------------------------------------------------------------
# modules.hh
#------------------------------------------------------------------------------
echo "#ifndef ${pkg}_ana_scripts_modules_hh" >| $pkg/ana/scripts/modules.hh 
echo "#define ${pkg}_ana_scripts_modules_hh" >> $pkg/ana/scripts/modules.hh 

for i in ${!modules[@]}; do
    module=TMy${modules[$i]}Module
    # echo  "class $module;"                                                >> $pkg/ana/scripts/modules.hh 
    printf "%-30s %-8s %-10s\n" "${module}*" "${m_names[$i]}" " = NULL;" >> $pkg/ana/scripts/modules.hh 
done

echo "#endif" >> $pkg/ana/scripts/modules.hh 
#------------------------------------------------------------------------------
# load_${pkg}_scripts.C
#------------------------------------------------------------------------------
echo "#include \"TInterpreter.h\""                >| $pkg/ana/scripts/load_stnana_scripts_$pkg.C
echo "#include \"${pkg}/ana/scripts/modules.hh\"" >> $pkg/ana/scripts/load_stnana_scripts_$pkg.C
echo "int load_stnana_scripts_${pkg}() {"         >> $pkg/ana/scripts/load_stnana_scripts_$pkg.C
cat << "EOF"                                      >> $pkg/ana/scripts/load_stnana_scripts_$pkg.C
//-----------------------------------------------------------------------------
// the first parameter is the script, the second - env.var telling whether 
// the script has to be loaded. If the corresponding env. variable is not defined,
// the script is not loaded. PWD is always defined
//-----------------------------------------------------------------------------
  char        macro[200];

  const char* script[] = { 
    "genp.C"       , "PWD",
    "trk.C"       , "PWD",
    "trs.C"       , "PWD",
    "trigger.C"   , "PWD",
    "helix.C"     , "PWD",
    "crv.C"       , "PWD",
    0 
  };

  TString work_dir = gEnv->GetValue("Stnana.TestReleaseDir",gSystem->Getenv("PWD"));

  TInterpreter* cint = gROOT->GetInterpreter();
  
  for (int i=0; script[i] != 0; i+=2) {
    const char* dir = gSystem->Getenv(script[i+1]);
    if (dir) {
EOF
echo "      sprintf(macro,\"%s/$pkg/ana/scripts/%s\",dir,script[i]);" >> $pkg/ana/scripts/load_stnana_scripts_$pkg.C
cat << "EOF" >> $pkg/ana/scripts/load_stnana_scripts_$pkg.C
      if (! cint->IsLoaded(macro)) cint->LoadMacro(macro);
    }
  }
  
  return 0;
}
EOF

#------------------------------------------------------------------------------
# copy individual job configuration scripts
#------------------------------------------------------------------------------
for i in ${!scripts[@]} ; do
    script=${scripts[$i]}
    f1=Stntuple/ana/scripts/$script
    f2=$pkg/ana/scripts/$script

    module=${modules[$i]}

    m1=Stn${module}
    m2=My${module}

    cat $f1 | \
	sed "s#Stntuple/ana#$pkg/ana#g" | sed "s/stn_//g" | \
	sed "s/$m1/$m2/g" | \
	sed "s/stntuple:://g" >| $f2
done
#------------------------------------------------------------------------------
# finally, append .rootrc and rootlogon.C
#------------------------------------------------------------------------------
if [ ".`cat .rootrc | grep +Stnana.Package | grep $pkg`" == '.' ] ; then 
  echo "+Stnana.Package                $pkg" >> .rootrc
fi

cat rootlogon.C | awk -v pkg=$pkg '
{ if ($1 == "//insert_user_libs_here") printf("      gSystem->Load(\"lib/lib%s_ana.so\");\n",pkg) ;
  else print $0; 
  endif 
}' >| rootlogon.C.new ; mv  rootlogon.C.new rootlogon.C
