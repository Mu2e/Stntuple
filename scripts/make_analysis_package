#!/bin/bash
#------------------------------------------------------------------------------
# create a prototype of a user analysis package by cloning and renaming templates 
# from Stntuple/ana 
# call format:  
#                 make_analysis_package [pkg]
#
#  pkg : name of the user analysis package to be created, default: aaa
#------------------------------------------------------------------------------
        pkg=$USER ; if [ ".$1" != "." ] ; then pkg=$1         ; fi
debug_level=0     ; if [ ".$2" != "." ] ; then debug_level=$2 ; fi
#------------------------------------------------------------------------------
# start from making a package directory and copying there a Stntuple/.muse file
#------------------------------------------------------------------------------
if [ -d $pkg ] ; then 
    echo package $pkg already exists, do the cleanup first.
    exit
fi

mkdir -p $pkg/ana/ana/dict
mkdir -p $pkg/ana/scripts
mkdir -p $pkg/scripts

cp Stntuple/.muse  $pkg/.muse
#------------------------------------------------------------------------------
# next: populate the package, start from SConscript files
# need package-level SConscript as a package may be processed by scons before Stntuple
#------------------------------------------------------------------------------
cat Stntuple/SConscript | awk -v pkg=$pkg '
BEGIN {printed=0}

/subprocess.call/{
  gsub("Stntuple",pkg,$0)
  gsub("build_config_muse","build_config",$0)
  print $0;
  printed = 1
}

/stntuple_env/{
  gsub("stntuple_env",pkg"_env",$0)
  print $0;
  printed = 1
}

{
  if (printed == 0) print $0;
  printed = 0;
}' >| $pkg/SConscript

if [ $debug_level != 0 ] ; then echo  "----->"  step 1.0 ; fi
cat Stntuple/ana/SConscript |  awk -v pkg=$pkg '
BEGIN {printed=0}

/stntuple_env/{
  gsub("stntuple_env",pkg"_env",$0)
  print $0;
  printed = 1
}

{ 
  if (printed == 0) print $0;
  printed = 0;
}' >| $pkg/ana/SConscript

if [ $debug_level != 0 ] ; then echo "----->"  step 1.5 ; fi
#------------------------------------------------------------------------------
# don't forget to rename Stntuple/scripts/build_config_muse --> build_config_muse
#------------------------------------------------------------------------------
cat Stntuple/scripts/build_config_muse | grep -v site_scons | grep -v .rootrc | grep -v rootlogon \
    | sed "s/Stntuple/$pkg/g" \
    | awk -F = '{if ($1 == "list_of_subpackages") { print "list_of_subpackages=\"ana\""} else {print $0}}' \
    >| $pkg/scripts/build_config

if [ $debug_level != 0 ] ; then echo "----->"  step 1.6 ; fi

chmod 755 $pkg/scripts/build_config
#------------------------------------------------------------------------------
# copy modules
#------------------------------------------------------------------------------
declare -a modules
declare -a scripts
declare -a m_names

modules=(TClusterAna   TCrvAna TGenAna THelixAna TSpmcAna TTrackAna TTrackSeedAna TTriggerAna )
scripts=(calorimeter.C crv.C   genp.C  helix.C   spmc.C   trk.C     trs.C         trigger.C   )
m_names=(m_cls         m_crv   m_gen   m_hel     m_spmc   m_trk     m_trs         m_trig      )
#------------------------------------------------------------------------------
# step 2 : copy modules, rename, replace the namespace
#------------------------------------------------------------------------------
if [ $debug_level != 0 ] ; then echo "----->"  step 2 ; fi

for m in ${modules[@]}; do
    module=${m}Module

    cat Stntuple/ana/$module.cc | sed "s/stntuple::/$pkg::/g" | \
	sed "s#Stntuple/ana#${pkg}/ana#"                      | \
	awk -v pkg=$pkg '{if ($1 == "namespace") {print $1 " " pkg " {" } else { print $0}}' \
	>| $pkg/ana/$module.cc

    cat Stntuple/ana/ana/$module.hh | sed "s/Stntuple_ana/${pkg}_ana/" | sed "s/stntuple::/$pkg::/g" | \
	sed "s#Stntuple/ana#$pkg/ana#"  | \
	awk -v pkg=$pkg '{if ($1 == "namespace") {print $1 " " pkg " {" } else { print $0}}' \
	>| $pkg/ana/ana/$module.hh

    cat Stntuple/ana/ana/dict/${module}_linkdef.h | sed "s/stntuple::/$pkg::/g" \
	>| $pkg/ana/ana/dict/${module}_linkdef.h
done
#------------------------------------------------------------------------------
# copy individual job configuration scripts
#------------------------------------------------------------------------------
for i in ${!scripts[@]} ; do
    script=${scripts[$i]}
    f1=Stntuple/ana/scripts/$script
    f2=$pkg/ana/scripts/$script
    nn=${pkg}_
    cat $f1 | sed "s/stn_/$nn/g" | sed "s/stntuple::/$pkg::/g" >| $f2
done
#------------------------------------------------------------------------------
# step 2.5 : copy additional data structures, to decouple the clone from Stntuple/ana
#------------------------------------------------------------------------------
list_of_includes="AnaDefs.hh HistBase_t.h TrackPar_t.hh SimPar_t.hh ParBase_t.hh VDetData_t.hh"
if [ $debug_level != 0 ] ; then echo "----->"  step 2.5 ; fi
for f in $list_of_includes; do
    cat Stntuple/ana/ana/$f | sed "s/Stntuple_ana/${pkg}_ana/" | sed "s/stntuple::/$pkg::/g" |   \
	sed "s#Stntuple/ana#${pkg}/ana#"  | \
	awk -v pkg=$pkg '{if ($1 == "namespace") {print $1 " " pkg " {" } else { print $0}}' \
	>| $pkg/ana/ana/${f}_tmp

    mv $pkg/ana/ana/${f}_tmp $pkg/ana/ana/$f
done
#------------------------------------------------------------------------------
# step 2.6 : copy additional non-module source files
#------------------------------------------------------------------------------
list_of_additional_files="InitVirtualDetectors"
if [ $debug_level != 0 ] ; then echo step 2.6 "----->"  pkg=$pkg ; fi
for f in $list_of_additional_files; do

    cat Stntuple/ana/$f.cc | sed "s/stntuple::/$pkg::/g" | \
	sed "s#Stntuple/ana#${pkg}/ana#"                      | \
	awk -v pkg=$pkg '{if ($1 == "namespace") {print $1 " " pkg " {" } else { print $0}}' \
	>| $pkg/ana/$f.cc

    cat Stntuple/ana/ana/$f.hh | sed "s/Stntuple_ana/${pkg}_ana/" | sed "s/stntuple::/$pkg::/g" | \
	sed "s#Stntuple/ana#$pkg/ana#"  | \
	awk -v pkg=$pkg '{if ($1 == "namespace") {print $1 " " pkg " {" } else { print $0}}' \
	>| $pkg/ana/ana/$f.hh

#    cat Stntuple/ana/ana/dict/${f}_linkdef.h | sed "s/stntuple::/$pkg::/g" \
#	>| $pkg/ana/ana/dict/${f}_linkdef.h
done

if [ $debug_level != 0 ] ; then echo step 3 "----->"  pkg=$pkg  ; fi
# source $pkg/scripts/build_config
#------------------------------------------------------------------------------
# modules.hh
#------------------------------------------------------------------------------
if [ $debug_level != 0 ] ; then echo step 4 "----->"  pkg=$pkg ; fi
echo "#ifndef ${pkg}_ana_scripts_modules_hh"                                >| $pkg/ana/scripts/modules.hh
echo "#define ${pkg}_ana_scripts_modules_hh"                                >> $pkg/ana/scripts/modules.hh
echo ""                                                                     >> $pkg/ana/scripts/modules.hh
for i in ${!modules[@]}; do
    module=${modules[$i]}Module
    echo  "#include \"$pkg/ana/$module.hh\""                                   >> $pkg/ana/scripts/modules.hh
done
echo ""                                                                     >> $pkg/ana/scripts/modules.hh
echo "namespace $pkg {"                                                     >> $pkg/ana/scripts/modules.hh
# for i in ${!modules[@]}; do
#     module=$pkg::${modules[$i]}Module
#     echo  "class $module;"                                                  >> $pkg/ana/scripts/modules.hh
# done
# echo ""                                                                     >> $pkg/ana/scripts/modules.hh
for i in ${!modules[@]}; do
    module=$pkg::${modules[$i]}Module
    printf "  %-30s %-8s %-10s\n" "${module}*" "${m_names[$i]}" " = nullptr;" >> $pkg/ana/scripts/modules.hh
done
echo "}"                                                                    >> $pkg/ana/scripts/modules.hh
echo "#endif"                                                               >> $pkg/ana/scripts/modules.hh
#------------------------------------------------------------------------------
# load_${pkg}_scripts.C
#------------------------------------------------------------------------------
if [ $debug_level != 0 ] ; then echo "----->"  step 5 ; fi

echo "#include \"TInterpreter.h\""                >| $pkg/ana/scripts/load_stnana_scripts_$pkg.C
echo "#include \"${pkg}/ana/scripts/modules.hh\"" >> $pkg/ana/scripts/load_stnana_scripts_$pkg.C
echo "int load_stnana_scripts_${pkg}() {"         >> $pkg/ana/scripts/load_stnana_scripts_$pkg.C
cat << "EOF"                                      >> $pkg/ana/scripts/load_stnana_scripts_$pkg.C
//-----------------------------------------------------------------------------
// the first parameter is the script, the second - env.var telling whether 
// the script has to be loaded. If the corresponding env. variable is not defined,
// the script is not loaded. PWD is always defined
//-----------------------------------------------------------------------------
  char        macro[200];

  const char* script[] = { 
    "calorimeter.C", "PWD",
    "crv.C"        , "PWD",
    "genp.C"       , "PWD",
    "spmc.C"       , "PWD",
    "trk.C"        , "PWD",
    "trs.C"        , "PWD",
    "trigger.C"    , "PWD",
    "helix.C"      , "PWD",
    0 
  };

  TString work_dir = gEnv->GetValue("Stnana.TestReleaseDir",gSystem->Getenv("PWD"));

  TInterpreter* cint = gROOT->GetInterpreter();
  
  for (int i=0; script[i] != 0; i+=2) {
    const char* dir = gSystem->Getenv(script[i+1]);
    if (dir) {
EOF
echo "      sprintf(macro,\"%s/$pkg/ana/scripts/%s\",dir,script[i]);" >> $pkg/ana/scripts/load_stnana_scripts_$pkg.C
cat << "EOF" >> $pkg/ana/scripts/load_stnana_scripts_$pkg.C
      if (! cint->IsLoaded(macro)) cint->LoadMacro(macro);
    }
  }
  
  return 0;
}
EOF
#------------------------------------------------------------------------------
# modify .rootrc and rootlogon.C to include new package
# 7.1 : .rootrc
#------------------------------------------------------------------------------
if [ $debug_level != 0 ] ; then echo echo "----->"  step 7.1 ; fi 

# the line might've been commented out
cat .rootrc | awk -v pkg=$pkg '
   BEGIN { found = 0} 
   /+Stnana.Package/ {
    if (index($0,pkg) > 0) { $0 = "+Stnana.Package "pkg ; found = 1} ;
   }
   { print $0 } 
   END { if (found == 0) print "+Stnana.Package "pkg}' >| .rootrc.new 
mv .rootrc.new .rootrc
#------------------------------------------------------------------------------
# 7.2 : rootlogon.C 
#------------------------------------------------------------------------------
if [ $debug_level != 0 ] ; then echo echo "----->"  step 7.2 ; fi 
cat rootlogon.C | awk -v pkg=$pkg '
{ 
  print $0 ;
  if ($1 == "//insert_user_libs_here") {
    printf("      gSystem->Load(\"$MUSE_BUILD_DIR/%s/lib/lib%s_ana.so\");\n",pkg,pkg) ;
  }
}' >| rootlogon.C.new ; 
cat  rootlogon.C.new | uniq >| rootlogon.C
#------------------------------------------------------------------------------
# 8.0 : finally, run build_config
#------------------------------------------------------------------------------
if [ $debug_level != 0 ] ; then echo echo "----->"  step 8 pkg=$pkg; fi 
source $pkg/scripts/build_config $pkg $debug_level

echo package $pkg successfully created
