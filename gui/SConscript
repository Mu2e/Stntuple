#!/usr/bin/env python
#
# Script to build the files found in this directory.
#------------------------------------------------------------------------------
import os, subprocess
# from stntuple_helper import *
Import('stntuple_env')
Import('stntuple_helper')
# env.Append(BUILDERS = {'StntupleRootCint' : stntuple_my_rootcint})
#------------------------------------------------------------------------------
# 2016-10-10: STNTUPLE link: add ROOT 'EG' library after 'Physics' library
#------------------------------------------------------------------------------
def local_build():

    local_env = stntuple_env.Clone();
    local_env['CXXFLAGS'].append('-DSTNTUPLE_NOSAM');

    babarlibs = local_env['BABARLIBS']
    rootlibs  = local_env['ROOTLIBS']

    if ( not ("EG"   in rootlibs)): rootlibs.insert(rootlibs.index("Physics")+1,"EG"  );
    if ( not ("Eve"  in rootlibs)): rootlibs.insert(rootlibs.index("EG"     )+1,"Eve" );
    if ( not ("Geom" in rootlibs)): rootlibs.insert(rootlibs.index("EG")+1     ,"Geom");

    debug = False
    helper = stntuple_helper(local_env,debug);
#------------------------------------------------------------------------------
# work around a bug in fhiclcpp 4.19.00-4.19.01:
# don't generate the ROOT dictionary for MuHitDisplay module for those versions
#------------------------------------------------------------------------------
    cmd = "spack find fhicl-cpp | grep fhicl-cpp | awk -F @ '{print $2}'"
    p = subprocess.Popen(cmd,
                         executable="/bin/bash",
                         shell=True,
                         stderr=subprocess.PIPE,
                         stdout=subprocess.PIPE,
                         encoding="utf-8")
    (out, err) = p.communicate();
    fhiclcpp_ver=out.strip();
    # print(f'out_2:{out} len(out):{len(out)} fhiclcpp_ver:{fhiclcpp_ver}')
    
    skip_dicts = []
    if (fhiclcpp_ver == '4.19.00') or (fhiclcpp_ver == '4.19.01'):
        skip_dicts.append('MuHitDisplay_module_linkdef.h')

    
    helper.handle_dictionaries(skip_list=skip_dicts);

    list_of_cc_files =  local_env.Glob('*.cc', strings=True);
    skip_list        = []
    libs             = [ 'Stntuple_print',
                         'Stntuple_obj',
                         'Stntuple_geom',
                         'Stntuple_base',
                         'mu2e_BTrkData',
                         'mu2e_RecoDataProducts' ,
                         'mu2e_MCDataProducts' ,
                         'mu2e_DataProducts' ,
                         'mu2e_CalorimeterGeom',
                         'mu2e_BeamlineGeom',
                         'mu2e_BFieldGeom',
                         'mu2e_GeometryService',
                         'mu2e_TrackerGeom',
                         'mu2e_ConfigTools',
                         'mu2e_TrackerConditions',
                         'mu2e_ConditionsService',
                         'mu2e_GeomPrimitives',
                         'mu2e_Mu2eUtilities',
                         'mu2e_GeneralUtilities',
                         babarlibs,
                         'art_Framework_Core',
                         'art_Framework_Services_Registry',
                         'art_Framework_Principal',
                        'art_Persistency_Common',
                         'art_Persistency_Provenance',
                         'art_Utilities',
                         'fhiclcpp',
                         'canvas',
                         'cetlib',
                         'cetlib_except',
                         'KinKal_Trajectory',
                         'KinKal_General',
                         'xerces-c',
                         rootlibs ,
                         'MF_MessageLogger',
                         'CLHEP'           ,
                         'tracelib'        ,
                         'boost_system'    ,
                         'boost_filesystem',
                         'boost_system'
                     ];

    helper.build_libs(list_of_cc_files,skip_list,skip_dict_list=skip_dicts,libs=libs);
#------------------------------------------------------------------------------
local_build();

