# -*- mode:tcl -*- 
#------------------------------------------------------------------------------
#  Prolog for production reconstruction jobs
#  reco jobs will use Reconstruction.services
#------------------------------------------------------------------------------
BEGIN_PROLOG
Reconstruction : {
# define the helix finders
  HelixFinders : [ "AgnosticHelixFinder", "CalHelixFinderDe" ]
}
Reconstruction : {
  @table::Reconstruction

  producers : {
    @table::TrkHitReco.producers
    @table::TrkPatRec.producers
    @table::CalPatRec.producers
    @table::CaloReco.producers
    @table::CaloCluster.producers
    @table::CrvRecoPackage.producers
    @table::CosmicReco.producers

    # choose the hit flagger
    flagPH : @local::CalPatRec.producers.DeltaFinder
    # flagPH : @local::TrkHitReco.producers.FlagBkgHits

    # instantiate explicit helix merger modules
    # NB: positive here refers to helicity, not charge!
    MHDe : {
      @table::TrkReco.producers.MergeHelices
      HelixFinders : [ "AgnosticHelixFinder", "CalHelixFinderDe", "HelixFinderDe" ]
    }
    MHDmu : {
      @table::TrkReco.producers.MergeHelices
      HelixFinders : [ "AgnosticHelixFinder" , "CalHelixFinderDmu", "HelixFinderDmu" ]
    }
    MHUe : {
      @table::TrkReco.producers.MergeHelices
      HelixFinders : [ "AgnosticHelixFinder", "CalHelixFinderUe", "HelixFinderUe" ]
    }
    MHUmu : {
      @table::TrkReco.producers.MergeHelices
      HelixFinders : [ "AgnosticHelixFinder", "CalHelixFinderUmu", "HelixFinderUmu" ]
    }
    # KinKal fits

    KKDe : {
      @table::Mu2eKinKal.producers.KKDe
      ModuleSettings : {
        @table::Mu2eKinKal.producers.KKDe.ModuleSettings
        HelixSeedCollections : [ "MHDe" ]
      }
    }

    KKUe : {
      @table::Mu2eKinKal.producers.KKUe
      ModuleSettings : {
        @table::Mu2eKinKal.producers.KKDe.ModuleSettings
        HelixSeedCollections : [ "MHUe" ]
      }
    }
    KKDmu : {
      @table::Mu2eKinKal.producers.KKDmu
      ModuleSettings : {
        @table::Mu2eKinKal.producers.KKDmu.ModuleSettings
        HelixSeedCollections : [ "MHDmu" ]
      }
    }
    KKUmu : {
      @table::Mu2eKinKal.producers.KKUmu
      ModuleSettings : {
        @table::Mu2eKinKal.producers.KKDmu.ModuleSettings
        HelixSeedCollections : [ "MHUmu" ]
      }
    }
    KKLine : {
      @table::Mu2eKinKal.producers.KKLine
      ModuleSettings : {
        @table::Mu2eKinKal.producers.KKLine.ModuleSettings
        CosmicTrackSeedCollections : ["LineFinder"]
      }
    }
    KKCHmu : {
      @table::Mu2eKinKal.producers.KKCHmu
      ModuleSettings : {
        @table::Mu2eKinKal.producers.KKCHmu.ModuleSettings
        CosmicTrackSeedCollections : ["LineFinder"]
      }
    }
    # Implicit TrkPatRec config for Final Fits and upstream fits (no merging)
    #
    # Prune output so that only parts related to reconstructed objects are kept
    #
    SelectReco : {
      module_type : SelectReco
      CaloClusterMinE : 10.0
      SaveNearbyDigis : false
      StrawDigiCollection : "makeSD"
      ComboHitCollection : "makeSH"
      CaloDigiCollection : "CaloDigiMaker"
      CrvDigiCollection : "CrvDigi"
      CaloClusterCollection : "CaloClusterMaker"
      CrvCoincidenceClusterCollection : "CrvCoincidenceClusterFinder"
      KalSeedCollections  : [ "KKDe", "KKDmu", "KKUe", "KKUmu", "KKLine", "KKCHmu" ]
    }
    # regrow
    RegrowSH : {
      @table::TrkHitReco.makeSH
      StrawDigiCollectionTag  : "SelectReco"
      StrawDigiADCWaveformCollectionTag : "SelectReco"
    }
    RegrowLH : {
      module_type : RegrowLoopHelix
      ComboHitCollection : RegrowSH
      StrawDigiIndexMap : "SelectReco:StrawDigiMap"
      CaloClusterCollection : "CaloClusterMaker"
      RefitSettings : {
        @table::Mu2eKinKal.REGROW
        BFieldCorrection : true
      }
      KKFitSettings: {
        @table::Mu2eKinKal.producers.KKDe.KKFitSettings
        SampleSurfaces : ["ST_Outer","ST_Front","ST_Back"]
        AddHits : false
      }
      ExtrapolationSettings : @local::Mu2eKinKal.LHDRIFTXTRAP
      MaterialSettings : @local::Mu2eKinKal.MAT
      Extend: true
      debug : 0
    }


  }

  filters : {
    LHFilter : {
      module_type   : KalSeedFilter
      kalSeedCollections : ["KKDe", "KKUe", "KKUmu", "KKDmu" ]
      noInfo : true # don't produce a TriggerInfo object
      debugLevel : 0
      KalSeedCuts : [ {
        requireCaloCluster : false
        minFitCons : -1.0
        minNStrawHits : 15
        minMomentum : 40.0
        maxMomentum : 300.0
        minTanDip : -2.0
        maxTanDip : 2.0
        maxChi2DOF : 1.0e6
        maxMomErr : 1e6
        minD0 : -800.0
        maxD0 :  800.0
        minNStereo : 3
        minNPlanes : 8
      } ]
    }
    CHFilter : {
      module_type   : KalSeedFilter
      kalSeedCollections : ["KKCHmu"]
      noInfo : true
      debugLevel : 0

      KalSeedCuts : [
      { # select 'normal' straight tracks that cut through multiple planes
        requireCaloCluster : false
        minFitCons : 0.0
        minNStrawHits : 20
        minMomentum : 300.0
        maxMomentum : 1e6
        minTanDip : -1.0e6
        maxTanDip : 1.0e6
        maxChi2DOF : 1.0e6
        maxMomErr : 1e6
        minD0 : -800.0
        maxD0 :  800.0
        minNStereo : 5
        minNPlanes : 10
      },
      { # also select vertical tracks; these need to have a lot of hits
        requireCaloCluster : false
        minFitCons : 0.0
        minNStrawHits : 50
        minMomentum : 300.0
        maxMomentum : 1e6
        minTanDip : -1.0e6
        maxTanDip : 1.0e6
        maxChi2DOF : 1.0e6
        maxMomErr : 1e6
        minD0 : -800.0
        maxD0 :  800.0
        minNStereo : 1
        minNPlanes : 1
      }
      ]
    }
    KLFilter : {
      module_type   : KalSeedFilter
      kalSeedCollections : [ "KKLine" ]
      noInfo : true
      KalSeedCuts : [ {
        requireCaloCluster : false
        minFitCons : 0.0
        minNStrawHits : 15
        minMomentum : 300.0
        maxMomentum : 1.0e6
        minTanDip : -1.0e6
        maxTanDip : 1.0e6
        maxChi2DOF : 1.0e6
        maxMomErr : 1e6
        minD0 : -800.0
        maxD0 :  800.0
        minNStereo : 2
        minNPlanes : 2
      },
      { # also select vertical tracks; these need to have a lot of hits
        requireCaloCluster : false
        minFitCons : 0.0
        minNStrawHits : 30
        minMomentum : 300.0
        maxMomentum : 1e6
        minTanDip : -1.0e6
        maxTanDip : 1.0e6
        maxChi2DOF : 1.0e6
        maxMomErr : 1e6
        minD0 : -800.0
        maxD0 :  800.0
        minNStereo : 1
        minNPlanes : 1
      }
      ]
    }
  }

  analyzers : {} # none yet
}
# now setup track finding sequences. These are separate sequences to allow granular execution
Reconstruction : {
  @table::Reconstruction
  # Downstream electron sequence (plus and minus), using merged helices
  DeReco : [
    TZClusterFinder, AgnosticHelixFinder,   # AgnosticPatRec
    CalTimePeakFinderDe, CalHelixFinderDe,  # CalPatRec
    TimeClusterFinderDe, HelixFinderDe,   # TrkPatRec
    MHDe, # helix merging
    KKDe  # KinKal drift fits
  ]
  # Upstream electron sequence (plus and minus)
  UeReco : [
    TZClusterFinder, AgnosticHelixFinder,   # AgnosticPatRec
    CalTimePeakFinderUe, CalHelixFinderUe,  # CalPatRec
    TimeClusterFinderUe, HelixFinderUe,   # TrkPatRec
    MHUe, # helix merging
    KKUe  # KinKal drift fits
  ]
  # Downstream muon sequence (plus and minus)
  DmuReco : [
    TZClusterFinder, AgnosticHelixFinder,    # AgnosticPatRec
    CalTimePeakFinderDmu, CalHelixFinderDmu,  # CalPatRec
    TimeClusterFinderDmu, HelixFinderDmu,   # TrkPatRec
    MHDmu, # helix merging
    KKDmu  # KinKal drift fits
  ]
  # Upstream muon sequence (plus and minus)
  UmuReco : [
    TZClusterFinder, AgnosticHelixFinder,     # AgnosticPatRec
    CalTimePeakFinderUmu, CalHelixFinderUmu,  # CalPatRec
    TimeClusterFinderUmu, HelixFinderUmu,   # TrkPatRec
    MHUmu, # helix merging
    KKUmu  # KinKal drift fits
  ]
 #
  # NoField straight line
  LineReco : [
    SimpleTimeCluster, LineFinder, KKLine
  ]
  # Central helix
  CentralHelixReco : [ SimpleTimeCluster, LineFinder, KKCHmu ]

  # add protons for calibration TODO!

  # Tracker reco sequence
  TrkHitReco : [  @sequence::TrkHitReco.PrepareHits ] # Track hits
  # Calo reco
  CaloReco : [ @sequence::CaloReco.Reco, @sequence::CaloCluster.Reco ]
  # CRV reco
  CrvReco : [ @sequence::CrvRecoPackage.CrvRecoSequence ]

  # define products to keep
  # First, high-level reco products, and associated sub-products
  # SelectReco has both real data and MC flavors. We will need to rename the instances generically in the near future TODO
  HighRecoProducts : [
    "keep mu2e::KalSeeds_K*_*_*",
    "keep mu2e::CaloClusters_*_*_*",
    "keep mu2e::CaloHits_*_*_*", # these are needed as CaloClusters reference CaloHits and are not compressed
    "keep mu2e::IndexMap_SelectReco_*_*", # the SelectReco products need to be explicit as that has MC products as well
    "keep mu2e::RecoCount_SelectReco_*_*",
    "keep mu2e::StrawDigis_SelectReco_*_*",
    "keep mu2e::StrawDigiADCWaveforms_SelectReco_*_*",
    "keep mu2e::CaloDigis_SelectReco_*_*",
    "keep mu2e::CrvDigis_SelectReco_*_*",
    "keep mu2e::CrvCoincidenceClusters_SelectReco_*_*",
    "keep mu2e::CrvRecoPulses_SelectReco_*_*"
  ]
  # Middle reco products, pat rec intermediate results
  MidRecoProducts : [
    "keep mu2e::HelixSeeds_MH*_*_*",
    "keep mu2e::TimeClusters_MH*_*_*"
  ]
  # Low reco products, useful for debugging and event display
  LowRecoProducts : [
    "keep mu2e::ComboHits_*_*_*"
  ]
  GeneralProducts : [
    @sequence::Digitize.GeneralProducts,
    @sequence::Digitize.TriggerProducts # not sure we want to keep these
  ]
  # TODO: add products from reconstruction-level estimates of PBI from tracker and calorimeter

}

# OnSpill track reconstruction sequence: LoopHelix electrons and muons, downstream and upstream
Reconstruction.OnSpillTrk : [
  @sequence::Reconstruction.DeReco,
  @sequence::Reconstruction.UeReco,
  @sequence::Reconstruction.DmuReco,
  @sequence::Reconstruction.UmuReco
]
#
# OffSpill track reconstruction sequence includes CentralHelix (high-momentum muons)
Reconstruction.OffSpillTrk : [
  @sequence::Reconstruction.OnSpillTrk,
  @sequence::Reconstruction.CentralHelixReco
]
#
# track reconstruction precursor sequence
Reconstruction.PreTrk : [
  @sequence::Reconstruction.CaloReco,
  @sequence::Reconstruction.TrkHitReco,
  @sequence::Reconstruction.CrvReco
]
# No Field reco paths
Reconstruction.NoFieldPath : [
  @sequence::Reconstruction.PreTrk,
  @sequence::Reconstruction.LineReco,
  KLFilter,
  SelectReco
]

# OnSpill paths; only LoopHelix
Reconstruction.OnSpillPath : [
  @sequence::Reconstruction.PreTrk,
  @sequence::Reconstruction.OnSpillTrk,
  LHFilter,
  SelectReco
]

# OffSpill paths. Separate by fit type
Reconstruction.OffSpillPath : [
  @sequence::Reconstruction.PreTrk,
  @sequence::Reconstruction.OffSpillTrk,
  SelectReco
]

Reconstruction.CentralHelixPath : [
  @sequence::Reconstruction.OffSpillPath,
  CHFilter,
  SelectReco
]

Reconstruction.LoopHelixPath : [
  @sequence::Reconstruction.OffSpillPath,
  LHFilter,
  SelectReco
]

# default output
Reconstruction.Output : {
  module_type : RootOutput
  fileName    : @nil
  outputCommands : [ "drop *_*_*_*",
    @sequence::Reconstruction.GeneralProducts,
    @sequence::Reconstruction.HighRecoProducts
  ]
}

Reconstruction.RegrowOutput : {
  module_type : RootOutput
  fileName    : @nil
  outputCommands : [
    @sequence::Reconstruction.GeneralProducts,
    @sequence::Reconstruction.HighRecoProducts,
    "drop *_*_*_Digitize",
    "drop *_*_*_Mix",
    "keep *_EWMProducer_*_*",
    "keep *_PBISim_*_*",
    "drop *_*_*_Reconstruct",
    "keep mu2e::Calo*_*_*_Reconstruct",
    "keep mu2e::Crv*_*_*_Reconstruct",
    "keep mu2e::KalSeed*_SelectReco_*_*",
    "keep *_compressRecoMCs_*_*",
    "keep *_SelectReco_*_*",
    "keep mu2e::KalSeed*_KKDe_*_*",
    "keep mu2e::KalSeed*_KKLine_*_*",
    "keep mu2e::KalSeed*_*_*_Regrow"
  ]
}

END_PROLOG
