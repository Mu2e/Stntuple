# -*- mode:tcl -*- 
#------------------------------------------------------------------------------
# su2020/common/templates.fcl 
# all prolog files have to be included before the templates files
# template file can include each other
#------------------------------------------------------------------------------
# global defaults 
#------------------------------------------------------------------------------
# BEGIN_PROLOG
#   bgHitFiles   : @nil
#   INPUT_MODULE : EmptyEvent             # EmptyEvent / RootInput
#   TRIGGER_PATH : p1
#   PROCESS_NAME : Stnmaker
# END_PROLOG
#------------------------------------------------------------------------------
# no more prologs beyond this point
# 
production : {
    producers : { 
#------------------------------------------------------------------------------
# MC producers
#------------------------------------------------------------------------------
#\\\\	@table::Trigger.producers
	@table::EventGenerator.producers  # defined in EventGenerator
	@table::CommonMC.producers        # FIXME
	@table::Mu2eG4.producers          # defined in Mu2eG4/fcl
	@table::CaloMC.producers          # defined in CaloMC
	@table::CrvDAQPackage.producers   # 
	@table::TrackerMC.producers       # defined in TrackerMC

#	compressDigiMCs : { @table::DigiCompression.Primary       # defined in Filters/fcl/#
#	    crvDigiMCTag         : ""
#	}
                                                                  # need these tags for mixing
#	makeSGSPrimary   : { @table::makeSGS }
	                                                          # in mixing mode, still filter on primary
#	makeSDPrimary    : { @table::makeSD
#	    StrawGasStepModule : makeSGSPrimary
#	}

	generate  : { @table::EventGenerator.producers.egun }      # to avoid unnecessary diagnostics
	genCounter: { module_type: GenEventCounter }

	# dummy protonBunchIntensity objects for primary-only datasets
	protonBunchIntensity : { module_type: ProtonBunchIntensityFlat
	    mean      : 0.0 # No PBI possible for pure signal! 
	    halfWidth : 1.0
	}

#	SeparateCaloShowerSteps : { @table::SeparateCaloShowerSteps } # defined in Filters
#------------------------------------------------------------------------------
# reco producers, compressDigiMCs defined there 
#------------------------------------------------------------------------------

#	@table::Reconstruction.producers   # inherited from JobConfig/reco/prolog.fcl

	@table::ParticleID.producers
#	@table::TrackCaloMatching.producers

	@table::CommonTrk.producers

#	TrkQualDeMHPar  : { @table::TrkQualDeM  KalSeedCollection: "KFFDeMHPar"  }
#	TrkQualDeMHDar  : { @table::TrkQualDeM  KalSeedCollection: "KFFDeMHDar"  }
#	TrkQualDmuMHPar : { @table::TrkQualDmuM KalSeedCollection: "KFFDmuMHPar" }
#	TrkQualDmuMHDar : { @table::TrkQualDmuM KalSeedCollection: "KFFDmuMHDar" }

#	TrkQualUeMHPar  : { @table::TrkQualUeM  KalSeedCollection: "KFFUeMHPar"  }
#	TrkQualUeMHDar  : { @table::TrkQualUeM  KalSeedCollection: "KFFUeMHDar"  }
#	TrkQualUmuMHPar : { @table::TrkQualUmuM KalSeedCollection: "KFFUmuMHPar" }
#	TrkQualUmuMHDar : { @table::TrkQualUmuM KalSeedCollection: "KFFUmuMHDar" }
#------------------------------------------------------------------------------
# helix mergers: each combines all found helices with the same direction and mass 
# into one collection
#------------------------------------------------------------------------------
	MHFinderDe : { @table::TrkReco.producers.MergeHelices
	    HelixFinders : [ "HelixFinderDe:Positive" , "CalHelixFinderDe:Positive" , "HelixFinderDe:Negative" , "CalHelixFinderDe:Negative" ]
	}
	MHFinderDmu : { @table::TrkReco.producers.MergeHelices
	    HelixFinders : [ "HelixFinderDmu:Positive", "CalHelixFinderDmu:Positive", "HelixFinderDmu:Negative", "CalHelixFinderDmu:Negative"]
	}
	MHFinderUe : { @table::TrkReco.producers.MergeHelices
	    HelixFinders : [ "HelixFinderUe:Positive" , "CalHelixFinderUe:Positive" , "HelixFinderUe:Negative" , "CalHelixFinderUe:Negative" ]
	}
	MHFinderUmu : { @table::TrkReco.producers.MergeHelices
	    HelixFinders : [ "HelixFinderUmu:Positive", "CalHelixFinderUmu:Positive", "HelixFinderUmu:Negative", "CalHelixFinderUmu:Negative"]
	}

#------------------------------------------------------------------------------
# track fit, downstream electron hypothesis
#------------------------------------------------------------------------------
	KSFDeMH     : { @table::KSFDeM                            SeedCollection : MHFinderDe  CheckHelicity:false }
	KFFDeMHPar  : { @table::KFFDeM                            SeedCollection : KSFDeMH  }
	KFFDeMHDar  : { @table::CalPatRec.producers.CalTrkFitDem  SeedCollection : KSFDeMH  }

#------------------------------------------------------------------------------
# track fit, downstream muon hypothesis
#------------------------------------------------------------------------------
	KSFDmuMH    : { @table::KSFDmuM                           SeedCollection : MHFinderDmu CheckHelicity:false}
	KFFDmuMHPar : { @table::KFFDmuM                           SeedCollection : KSFDmuMH }
	KFFDmuMHDar : { @table::CalPatRec.producers.CalTrkFitDmm  SeedCollection : KSFDmuMH }

#------------------------------------------------------------------------------
# track fit, upstream electron hypothesis
#------------------------------------------------------------------------------
	KSFUeMH     : { @table::KSFUeM                            SeedCollection : MHFinderUe  CheckHelicity:false }
	KFFUeMHPar  : { @table::KFFUeM                            SeedCollection : KSFUeMH  }
#------------------------------------------------------------------------------
# track fit, upstream muon hypothesis
#------------------------------------------------------------------------------
	KSFUmuMH    : { @table::KSFUmuM                           SeedCollection : MHFinderUmu CheckHelicity:false}
	KFFUmuMHPar : { @table::KFFUmuM                           SeedCollection : KSFUmuMH }
    }
#------------------------------------------------------------------------------
#  filters
#------------------------------------------------------------------------------
    filters : {
#\\\\	@table::Trigger.filters

	g4status: { module_type: FilterStatusG4
	    input            : "g4run"
	    maxAcceptedStatus: 9  #  status 10 and above means StepPointMCCollection may have non-dereferencable pointers
	}

	detectorFilter : { module_type: FilterG4Out
	    mainHitInputs   : [ "g4run:tracker" ]
	    mainSPPtrInputs : [ ]
	    extraHitInputs  : [ "g4run:virtualdetector", "g4run:protonabsorber" ]
	    vetoDaughters   : [ ]
	}

	crvFilter: { module_type: FilterG4Out
	    mainHitInputs : [ "g4run:CRV" ]
	    extraHitInputs: [ "g4run:virtualdetector" ]
	    vetoParticles : [ ]
	}

	filterStepPointMomentum : { @table::FilterStepPointMomentum
	    cutMomentumMin : -1
	}

	@table::CalPatRec.filters

#	SimParticleFilter : { @table::SimParticleFilter }              # Filters/fcl/prolog.fcl
#	StrawDigiMCFilter : { @table::StrawDigiMCFilter }              # Filters/fcl/prolog.fcl

	CaloShowerSimFilter : { module_type :CaloShowerSimFilter
	    particleTypes     : [ 22, 11, -11, 13, -13, 2212, -2212  ] # save photons, electrons, muons, and protons
	    MinParticleEnergy : 40.0
	    MinTotalEnergy    : 10000.0 # disable
	}
	GammaFilter : { module_type : GammaDaughterFilter
	    doFilter    : false 
	}
    }

    analyzers : {
#\\\\	@table::Trigger.analyzers
        genCountLogger            : { module_type: GenEventCountReader } # defalt: 1 StepPointMC, 10 MeV
    }
}

#------------------------------------------------------------------------------
# output event formats
# 1. event format for mixing input
#------------------------------------------------------------------------------
production.gen_sim_output       : [ "drop    *_*_*_*"                                 ,
				"keep    mu2e::EventWeight_*_*_*"                 ,
				"keep    mu2e::EventWindowMarker_EWMProducer_*_*" ,
				"keep    mu2e::FixedTimeMap_*_*_*"                ,
				"keep    mu2e::GenEventCount_*_*_*"               ,
				"keep    mu2e::GenParticles_*_*_*"                ,
				"keep    *_g4run_*_*"                             ,
				"drop    mu2e::StepPointMCs_g4run_calorimeter_*"  ,
				"drop    mu2e::StepPointMCs_g4run_calorimeterRO_*",
				"keep    mu2e::CaloShowerSteps_*_*_*"
			       ]
#------------------------------------------------------------------------------
# 2. output format for digi files
#------------------------------------------------------------------------------
production.gen_sim_digi_output  : [ "drop    *_*_*_*"                                ,
				"keep    *_compressDigiMCs_*_*"                  ,
				"keep    mu2e::GenEventCount_*_*_*"              ,
				"keep    mu2e::GenParticles_generate_photon_*"   ,
				"keep    mu2e::StatusG4_g4run_*_*"               ,
				"keep    mu2e::EventWeight_*_*_*"                ,
				"keep    mu2e::EventWindowMarker_EWMProducer_*_*",
				"keep    mu2e::FixedTimeMap_*_*_*"               ,
				"keep    mu2e::CaloDigis_CaloDigiFromShower_*_*" ,
				"keep    mu2e::CrvDigis_CrvDigi_*_*"             ,
				"keep    mu2e::ProtonBunchIntensity_*_*_*"       ,
				"keep    mu2e::StrawDigis_makeSD_*_*"            ,
				"keep    art::TriggerResults_TriggerResults_*_*"
			       ]
#------------------------------------------------------------------------------
# 2. output format for digi files after mixing
#------------------------------------------------------------------------------
production.mixing_output : [ "drop *_*_*_*"                               ,
			 "keep *_compressDigiMCs_*_*"                 ,
			 "keep mu2e::GenEventCount_*_*_*"             ,
			 "keep mu2e::GenParticles_generate_photon_*"  ,
			 "keep mu2e::EventWeight_*_*_*"               ,
			 "keep mu2e::EventWindowMarker_*_*_*"         ,
			 "keep mu2e::ProtonBunchIntensity_*_*_*"      ,
			 "keep mu2e::StrawDigis_*_*_*"                ,
			 "keep mu2e::CaloDigis_*_*_*"                 ,
			 "keep mu2e::CrvDigis_*_*_*"                  ,
			 "keep art::TriggerResults_TriggerResults_*_*"
			]
#------------------------------------------------------------------------------
# module sequences - by functionality
#------------------------------------------------------------------------------
production.gen_g4              : [ generate, genCounter, g4run, g4status ]

production.gen_g4_pbi          : [ generate, genCounter, g4run, protonBunchIntensity ]

production.gen_g4_pbi_detFilter: [ generate, genCounter, g4run, protonBunchIntensity, filterStepPointMomentum ]

production.pbi_ewm             : [ protonBunchIntensity, EWMProducer ]

production.digis               : [ @sequence::TrackerMC.DigiSim, StrawDigiMCFilter, 
				   ## FIXME @sequence::CaloDigiMC.DigiSim, 
				   @sequence::CrvDAQPackage.CrvDAQSequence 
				   # compressDigiMCs 
				  ]

production.digis_no_filter     : [ @sequence::TrackerMC.DigiSim, 
			       # StrawDigiMCFilter, 
				   ## FIXME @sequence::CaloDigiMC.DigiSim, 
			       @sequence::CrvDAQPackage.CrvDAQSequence
			       # compressDigiMCs 
			      ]

production.digisCaloFilter     : [ # FIXME @sequence::CaloDigiMC.DigiSim, 
				   CaloShowerSimFilter,
				   @sequence::TrackerMC.DigiSim, 
				   @sequence::CrvDAQPackage.CrvDAQSequence 
				   # compressDigiMCs 
			      ]

# calorimeter reconstruction
production.calo_hit_reco        : [ CaloRecoDigiFromDigi ,CaloCrystalHitFromHit ]

production.calo_cluster_reco    : [ CaloProtoClusterFromCrystalHit, CaloClusterFromProtoCluster ]

production.calo_reco            : [ @sequence::production.calo_hit_reco,
				@sequence::production.calo_cluster_reco ]

# track hit reconstruction
production.trk_hit_reco         : [ makeSH, makePH, FlagBkgHits]


# CRV reconstruction
production.crv_reco             : [ @sequence::CrvRecoMCPackage.CrvRecoMCSequence ]

# downstream e+/e- helix reconstruction
production.helix_reco_de : [
			TimeClusterFinderDe, HelixFinderDe,                     # TrkPatRec
			CalTimePeakFinder, DeltaFinder, CalHelixFinderDe,       # CalPatRec
			MHFinderDe                                              # helix merging
		       ]

# upstream e+/e- helix reconstruction
production.helix_reco_ue : [
			TimeClusterFinderUe, HelixFinderUe,                     # TrkPatRec-only
			CalTimePeakFinderUe, DeltaFinderUe, CalHelixFinderUe,   # CalPatRec
			MHFinderUe                                              # helix merging
		       ]

# downstream electron reconstruction: e- and e+ combined
production.trk_reco_de  : [
		       TimeClusterFinderDe, HelixFinderDe,                     # TrkPatRec
		       CalTimePeakFinder, DeltaFinder, CalHelixFinderDe,       # CalPatRec
		       MHFinderDe,                                             # helix merging
		       KSFDeMH,                                                # Seed fit (chisquared, no drift)
		       KFFDeMHPar, KFFDeMHDar                                  # final Kalman filter fit with the Panel-based AR
		      ]

production.trk_reco_de_dar : [
		       TimeClusterFinderDe, HelixFinderDe,                     # TrkPatRec
		       CalTimePeakFinder, DeltaFinder, CalHelixFinderDe,       # CalPatRec
		       MHFinderDe,                                             # helix merging
		       KSFDeMH,                                                # Seed fit (chisquared, no drift)
		       KFFDeMHDar                                              # final Kalman filter, DAR-only
		      ]

# downstream muon reconstruction: mu- and mi+ combined
production.trk_reco_dmu : [
		       TimeClusterFinderDmu, HelixFinderDmu,                   # TrkPatRec
		       CalTimePeakFinderMu, DeltaFinderMu, CalHelixFinderDmu,  # CalPatRec
		       MHFinderDmu,                                            # helix merging
		       KSFDmuMH,                                               # Seed fit (chisquared, no drift)
		       KFFDmuMHPar, KFFDmuMHDar                                # final Kalman filter fit with the panel-based AR
		      ]

production.trk_reco_dmu_dar : [
		       TimeClusterFinderDmu, HelixFinderDmu,                   # TrkPatRec
		       CalTimePeakFinderMu, DeltaFinderMu, CalHelixFinderDmu,  # CalPatRec
		       MHFinderDmu,                                            # helix merging
		       KSFDmuMH,                                               # Seed fit (chisquared, no drift)
		       KFFDmuMHDar                                             # final Kalman filter fit, DAR-only
		      ]

# upstream electron reconstruction (e- and e+): standalone-only pattern recognition, 
# calorimeter-seeded algorithm is designed to deal only with the downstream tracks
production.trk_reco_ue  : [
		       TimeClusterFinderUe, HelixFinderUe,   
		       CalTimePeakFinderUe, DeltaFinderUe, CalHelixFinderUe,   # CalPatRec
		       MHFinderUe,                                             # helix merging
		       KSFUeMH,                                                # Seed fit (chisquared, no drift)
		       KFFUeMHPar , KFFUeMHDar                                 # final Kalman filter fit
		      ]

# upstream electron reconstruction, DAR
production.trk_reco_ue_dar : [
		       TimeClusterFinderUe, HelixFinderUe,                     # TrkPatRec
		       CalTimePeakFinderUe, DeltaFinderUe, CalHelixFinderUe,   # CalPatRec
		       MHFinderUe,                                             # helix merging
		       KSFUeMH,                                                # Seed fit (chisquared, no drift)
		       KFFUeMHDar                                              # final Kalman filter, DAR-only
		      ]

# upstream muon reconstruction (mu- and mu+): standalone-only pattern recognition, 
# calorimeter-seeded algorithm is designed to deal only with the downstream tracks
production.trk_reco_umu : [
		       TimeClusterFinderUmu, HelixFinderUmu,   
		       MHFinderUmu,                                            # helix merging
		       KSFUmuMH,                                               # Seed fit (chisquared, no drift)
		       KFFUmuMHPar , KFFUeMHDar                                # final Kalman filter fit
		      ]

# tracks reconstructions: positive and negative charges separate
# use sequecnes defined in JobConfig/reco/prolog.fcl
production.trk_reco_sep  : [ # FIXME @sequence::Reconstruction.DeSequence,
			     # @sequence::Reconstruction.UeSequence,
			     # @sequence::Reconstruction.DmuSequence,
			     # @sequence::Reconstruction.UmuSequence
			    ]

# MC compression at the end of reco, assume the pulse punch intensity to be present
production.reco_compression : [ FindMCPrimary,        # find the primary particle
				SelectRecoMC,         # identify the MC information we want to keep
				compressRecoMCs       # compress
			       ]

# trigger paths considered, include into digi datasets
production.triggers         : [
			       tprSeedDeM_trigger    , cprSeedDeM_trigger    , tprSeedDeP_trigger    , cprSeedDeP_trigger    , 
			       cprLowPSeedDeM_trigger, cprLowPSeedDeP_trigger, tprLowPSeedDeM_trigger, tprLowPSeedDeP_trigger, 
			       tprHelixIPADeM_trigger
			      ]
#------------------------------------------------------------------------------
# PRODUCTION paths
#------------------------------------------------------------------------------
production.paths : {
#\\\\	@table::Trigger.paths
#------------------------------------------------------------------------------
# start from including the trigger paths
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
# gcl: an attempt to introduce a standard name for genCountLogger path
#------------------------------------------------------------------------------
    gcl        : [ genCountLogger ]
#------------------------------------------------------------------------------
# p1  : MC generation, G4, digitization
# p12 : MC generation, G4, filter events with at least one step point in the tracker of the calorimeter
# p14 : prepare inputs for mixing
#------------------------------------------------------------------------------
    production_p1 : [ @sequence::production.gen_g4_pbi,           # includes protonBunchIntensity
		      GammaFilter,                            # does nothing by default
		      @sequence::CommonMC.DigiSim      ,      # adds EWMProducer (name - confusing)
		      @sequence::production.digis          ,
		      compressDigiMCs
		     ]

	# same as production_p1, but using a calo filter instead of straw digi filter
    production_p1calo : [ @sequence::production.gen_g4_pbi     , 
			  GammaFilter                      ,  # does nothing by default
			  @sequence::CommonMC.DigiSim      ,  # EWMProducer
			  @sequence::production.digisCaloFilter,
			  compressDigiMCs
			  
			 ]

    production_p10 : [ @sequence::production.gen_g4_pbi,          # includes ProtonBunchIntensity
		       filterStepPointMomentum ,
		       GammaFilter,                           # does nothing by default
		       @sequence::CommonMC.DigiSim       ,    # adds EWMProducer (name - confusing)
		       @sequence::production.digis_no_filter ,    # no StrawDigiMCFilter, for mixing
		       compressDigiMCs
		      ]

    production_p11 : [ g4run, protonBunchIntensity,           # what's left of @sequence::production.gen_g4_time_map,
		       @sequence::CommonMC.DigiSim, 
		       GammaFilter                ,           # does nothing by default
		       @sequence::production.digis    ,
		       compressDigiMCs
		     ]

    production_p111 : [ @sequence::production.pbi_ewm   ,          # what's left of @sequence::production.gen_g4_time_map,
			# @sequence::CommonMC.TimeMaps, 
			GammaFilter                 ,          # does nothing by default
			@sequence::production.digis_no_filter,
			compressDigiMCs
		       ]

    production_p12 : [ @sequence::production.gen_g4_pbi,          # includes ProtonBunchIntensity
		       filterStepPointMomentum,               # 
		       @sequence::CommonMC.DigiSim            # adds EWMProducer (name - confusing)
		      ]


    production_p13 : [ g4run , 
		       filterStepPointMomentum,               # 
		       @sequence::CommonMC.DigiSim            # adds EWMProducer (name - confusing)
		      ]

    production_p14_mustop : [ generate, genCounter, g4run, filterStepPointMomentum, 
			      # protonTimeMap, muonTimeMap, 
			      CaloShowerStepFromStepPt
			     ]                                # path for producing mixing inputs from muon captures

    production_p14_flash : [ g4run, filterStepPointMomentum
			     # protonTimeMap, 
			     # CaloShowerStepFromStepPt
			    ]                                 # path for producing the mixing input from beam flash 

    production_p15_flash : [ protonTimeMap           , 
			     filterStepPointMomentum ,        # filter again, now - on time, need step points...
			     CaloShowerStepFromStepPt
			    ]                                 # path for producing the mixing input from beam flash 
#------------------------------------------------------------------------------
# p2: read digis, do reconstruction: run downstream electron and muon reco paths
#------------------------------------------------------------------------------
    production_p2 : [ @sequence::production.calo_reco,
		      @sequence::production.trk_hit_reco,
		      @sequence::production.trk_reco_de ,
		      @sequence::production.trk_reco_dmu , 
		      @sequence::production.trk_reco_sep ,
		      @sequence::production.reco_compression
		     ]

#------------------------------------------------------------------------------
# p21: read digis, do reconstruction: run downstream electron and muon reco paths
#------------------------------------------------------------------------------
    production_p21 : [ @sequence::production.calo_reco,
		       @sequence::production.trk_hit_reco,
		       @sequence::production.trk_reco_de ,
		       @sequence::production.trk_reco_dmu
		      ]

#------------------------------------------------------------------------------
# p22: read digis, reconstruct helices - both directions, 
#      2021-03-21: currently time clustering is currently not direction-symmetric
#------------------------------------------------------------------------------
    production_p22 : [ @sequence::production.calo_reco,
		       @sequence::production.trk_hit_reco,
		       @sequence::production.helix_reco_de,
		       @sequence::production.helix_reco_ue
		      ]

#------------------------------------------------------------------------------
# p100: concatenation job, trigger path is empty
#------------------------------------------------------------------------------
    production_p100 : [ ]
}
#------------------------------------------------------------------------------
# upstream time clustering: turn off the ANN-based hit removal
#------------------------------------------------------------------------------
# production.producers.TimeClusterFinderUe.PrefilterCluster : false
# production.producers.TimeClusterFinderUe.MinKeepHitMVA    : -100.
#------------------------------------------------------------------------------
# introduce blind time - start of digitization
#------------------------------------------------------------------------------
services.DbService.verbose                                   : 0
# services.ProditionsService.strawElectronics.useDb            : false
# services.ProditionsService.strawElectronics.verbose          : 0

# services.ProditionsService.strawElectronics.flashEnd         : @erase
# services.ProditionsService.strawElectronics.flashEnd         : @local::BLIND_TIME

physics.producers.makeSH.minimumTime                         : @erase
physics.producers.makeSH.minimumTime                         : @local::BLIND_TIME

physics.producers.CaloShowerStepROFromShowerStep.blindTime   : @erase
physics.producers.CaloShowerStepROFromShowerStep.blindTime   : @local::BLIND_TIME

physics.producers.CaloDigiFromShower.blindTime               : @erase 
physics.producers.CaloDigiFromShower.blindTime               : @local::BLIND_TIME

physics.producers.CaloProtoClusterFromCrystalHit.timeCut     : @erase
physics.producers.CaloProtoClusterFromCrystalHit.timeCut     : @local::BLIND_TIME

physics.producers.TimeClusterFindere.tmin                    : @erase
physics.producers.TimeClusterFindere.tmin                    : @local::BLIND_TIME
# 
physics.filters.CalTimePeakFinder.minClusterTime             : @erase
physics.filters.CalTimePeakFinder.minClusterTime             : @local::BLIND_TIME
# 
physics.producers.DeltaFinder.minimumTime                    : @erase
physics.producers.DeltaFinder.minimumTime                    : @local::BLIND_TIME
# 
physics.filters.CalHelixFinderDe.HelixFinderAlg.minimumTime : @erase
physics.filters.CalHelixFinderDe.HelixFinderAlg.minimumTime : @local::BLIND_TIME
#------------------------------------------------------------------------------
# common patches to offline modules (inherited from JobConfig)
#------------------------------------------------------------------------------
production.producers.cosmicTimeMap.tmin   : 400 
production.producers.makeSD.AllHitsPlanes : [34,35]

production.producers.g4run.SDConfig.enableSD : [ @sequence::production.producers.g4run.SDConfig.enableSD, "protonabsorber" ]

# services.ConditionsService : { @table::services.ConditionsService
#     StrawElectronics: { 
# 	FlashStart             : 1705
# 	DiscriminatorThreshold : [  # 192 total
# 				  12.2 , 11.3 , 12.6 , 12.5 , 12.7 , 12.5 , 12.3 , 11.1 , 11.3 , 12.1 , #  0
# 				  11.6 , 11.5 , 13.0 , 11.1 , 10.5 , 11.4 , 11.0 , 12.0 , 12.8 , 12.8 , # 10
# 				  12.1 , 11.2 , 11.6 , 13.1 , 12.3 , 12.3 , 12.2 , 11.8 , 13.5 , 13.4 , # 20
# 				  10.7 , 11.7 , 13.6 , 12.3 ,  9.9 , 12.1 , 10.4 , 13.2 , 11.9 , 13.5 , 
# 				  12.5 , 12.6 , 12.1 , 14.2 , 13.3 , 11.5 , 11.5 , 11.7 , 11.6 , 13.2 , 
# 				  14.9 , 12.7 , 12.7 , 12.6 , 11.4 , 13.5 , 12.2 , 12.6 , 11.9 , 10.3 , 
# 				  12.4 , 12.3 , 11.1 , 10.7 , 12.0 , 12.9 , 13.4 , 13.8 , 11.1 , 13.1 , 
# 				  13.2 , 12.3 , 13.3 , 12.6 , 11.6 , 11.4 , 11.6 , 11.9 , 10.9 , 10.8 , 
# 				  11.5 , 12.4 , 11.5 , 11.0 , 12.3 , 12.4 , 12.2 , 10.9 , 11.7 , 11.3 , 
# 				  12.8 , 13.3 , 11.4 , 12.6 , 10.7 , 12.0 , 14.3 , 12.1 , 12.4 , 12.6 , 
# 				  11.5 , 13.3 , 11.8 , 13.3 , 11.4 , 11.0 , 11.8 , 13.1 , 12.6 , 11.5 , # 100
# 				  10.5 , 11.2 , 12.5 , 11.9 , 11.4 , 12.3 , 11.7 , 12.2 , 13.4 , 10.5 , 
# 				  12.6 , 11.7 , 12.3 , 11.3 , 12.0 , 12.6 , 12.5 , 12.1 , 11.2 , 13.6 , 
# 				  11.9 , 11.4 , 12.6 , 12.9 , 11.4 , 12.8 , 11.4 , 13.2 , 13.0 , 11.4 , 
# 				  13.2 , 12.4 , 13.1 , 14.9 , 12.4 , 11.2 , 10.6 , 10.4 , 11.3 , 13.0 , 
# 				  10.8 , 11.9 , 11.6 , 12.3 , 11.4 , 12.6 , 12.3 , 13.7 , 12.7 , 12.1 , 
# 				  12.3 , 10.2 ,  9.9 , 10.9 , 11.6 , 12.6 , 12.7 , 12.4 , 10.9 , 12.2 , 
# 				  13.2 , 13.2 , 11.3 , 12.8 , 11.7 , 12.7 , 13.3 , 12.4 , 12.0 , 12.3 , 
# 				  12.0 , 12.9 , 11.9 , 12.6 , 11.6 , 13.6 , 12.8 , 13.6 , 13.3 , 13.2 , # 190
# 				  12.4 , 11.6 ]
#     }
# }
#----------------------------------------------------------------------------
# 2020-09-18 P.M. : update CRV light yield - take out the 30% "safety factor"
#----------------------------------------------------------------------------
production.producers.CrvPhotons.scintillationYield               : 16545
#----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# 2020-08-18 P.M. : changes to the CRV thresholds wrt CRVResponse/fcl/prolog_v8.fcl (by Ben/Yuri)
#----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#                      old(v8)  PEthresholds                 : [  26 ,  26 ,  26 ,  26 ,  26 ,  26 ,  26 ,  36 ,  22 ,  18 ,  20 ,  36 ,  36 ,  28 ,  36 ,  36 ,  36 ,  36 ,  26 ,  26 ,  26 ,  26 ]
production.producers.CrvCoincidence.PEthresholds                 : [  8  ,   8 ,   8 ,   8 ,   8 ,   8 ,   8 ,   8 ,   8 ,  8  ,  8  ,   8 ,   8 ,   8 ,  8  ,  8  ,   8 ,  8  ,   8 ,   8 ,   8 ,   8 ]

#                      old(v8)  useFourLayers                : [false,false,false,false,false,false,false, true, true,false,false, true, true, true,false,false,false,false,false,false,false,false] 
production.producers.CrvCoincidence.useFourLayers                : [false,false,false,false,false,false,false, true,false,false,false, true, true, true, true, true, true, true,false,false,false,false]

#                      old(v8)  adjacentPulseTimeDifferences : [   5 ,   5 ,   5 ,   5 ,   5 ,   5 ,   5 ,  10 ,  10 ,   5 ,   5 ,  10 ,  10 ,  10 ,   5 ,   5 ,   5 ,   5 ,   5 ,   5 ,   5 ,   5 ] //ns
production.producers.CrvCoincidence.adjacentPulseTimeDifferences : [  10 ,  10 ,  10 ,  10 ,  10 ,  10 ,  10 ,  10 ,  10 ,  10 ,  10 ,  10 ,  10 ,  10 ,  10 ,  10 ,  10 ,  10 ,  10 ,  10 ,  10 ,  10 ] //ns

# for reco compression we don't have CRV reco path at the moment
production.producers.SelectRecoMC.SkipCrv                        : true
production.producers.compressRecoMCs.crvDigiMCTag                : ""
production.producers.compressRecoMCs.crvDigiMCIndexMapTag        : ""
production.producers.compressRecoMCs.crvCoincClusterMCTag        : ""
